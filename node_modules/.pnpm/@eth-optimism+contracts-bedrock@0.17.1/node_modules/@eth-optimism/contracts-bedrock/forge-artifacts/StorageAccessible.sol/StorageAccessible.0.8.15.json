{"abi":[{"type":"function","name":"getStorageAt","inputs":[{"name":"offset","type":"uint256","internalType":"uint256"},{"name":"length","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"simulateAndRevert","inputs":[{"name":"targetContract","type":"address","internalType":"address"},{"name":"calldataPayload","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getStorageAt(uint256,uint256)":"5624b25b","simulateAndRevert(address,bytes)":"b4faba09"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getStorageAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Gnosis Developers\",\"kind\":\"dev\",\"methods\":{\"getStorageAt(uint256,uint256)\":{\"params\":{\"length\":\"- the number of words (32 bytes) of data to read\",\"offset\":\"- the offset in the current contract's storage in words to start reading from\"},\"returns\":{\"_0\":\"the bytes that were read.\"}},\"simulateAndRevert(address,bytes)\":{\"details\":\"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}}},\"title\":\"StorageAccessible - A generic base contract that allows callers to access all internal storage.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStorageAt(uint256,uint256)\":{\"notice\":\"Reads `length` bytes of storage in the currents contract\"}},\"notice\":\"See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol         It removes a method from the original contract not needed for the Safe contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/safe-contracts/contracts/common/StorageAccessible.sol\":\"StorageAccessible\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@lib-keccak/=lib/lib-keccak/contracts/lib/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":@solady-test/=lib/lib-keccak/lib/solady/test/\",\":@solady/=lib/lib-keccak/lib/solady/src/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/\",\":lib-keccak/=lib/lib-keccak/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solady/=lib/solady/src/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/safe-contracts/contracts/common/StorageAccessible.sol\":{\"keccak256\":\"0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://e775f267d3e60ebe452d9533f46a0eb1f1dc4593d1bcb553e86cea205a5f361e\",\"dweb:/ipfs/QmQdYDHGQsiMx1AADWRhX7tduU9ycTzrT5q3zBWvphXzKZ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.15+commit.e14f2714"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"stateMutability":"view","type":"function","name":"getStorageAt","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"calldataPayload","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"simulateAndRevert"}],"devdoc":{"kind":"dev","methods":{"getStorageAt(uint256,uint256)":{"params":{"length":"- the number of words (32 bytes) of data to read","offset":"- the offset in the current contract's storage in words to start reading from"},"returns":{"_0":"the bytes that were read."}},"simulateAndRevert(address,bytes)":{"details":"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.","params":{"calldataPayload":"Calldata that should be sent to the target contract (encoded method name and arguments).","targetContract":"Address of the contract containing the code to execute."}}},"version":1},"userdoc":{"kind":"user","methods":{"getStorageAt(uint256,uint256)":{"notice":"Reads `length` bytes of storage in the currents contract"}},"version":1}},"settings":{"remappings":["@cwia/=lib/clones-with-immutable-args/src/","@lib-keccak/=lib/lib-keccak/contracts/lib/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","@solady-test/=lib/lib-keccak/lib/solady/test/","@solady/=lib/lib-keccak/lib/solady/src/","clones-with-immutable-args/=lib/clones-with-immutable-args/src/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/","lib-keccak/=lib/lib-keccak/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/contracts/","solady/=lib/solady/src/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"lib/safe-contracts/contracts/common/StorageAccessible.sol":"StorageAccessible"},"evmVersion":"london","libraries":{}},"sources":{"lib/safe-contracts/contracts/common/StorageAccessible.sol":{"keccak256":"0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e","urls":["bzz-raw://e775f267d3e60ebe452d9533f46a0eb1f1dc4593d1bcb553e86cea205a5f361e","dweb:/ipfs/QmQdYDHGQsiMx1AADWRhX7tduU9ycTzrT5q3zBWvphXzKZ"],"license":"LGPL-3.0-only"}},"version":1},"storageLayout":{"storage":[],"types":{}},"userdoc":{"version":1,"kind":"user","methods":{"getStorageAt(uint256,uint256)":{"notice":"Reads `length` bytes of storage in the currents contract"}},"notice":"See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol         It removes a method from the original contract not needed for the Safe contracts."},"devdoc":{"version":1,"kind":"dev","author":"Gnosis Developers","methods":{"getStorageAt(uint256,uint256)":{"params":{"length":"- the number of words (32 bytes) of data to read","offset":"- the offset in the current contract's storage in words to start reading from"},"returns":{"_0":"the bytes that were read."}},"simulateAndRevert(address,bytes)":{"details":"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.","params":{"calldataPayload":"Calldata that should be sent to the target contract (encoded method name and arguments).","targetContract":"Address of the contract containing the code to execute."}}},"title":"StorageAccessible - A generic base contract that allows callers to access all internal storage."},"ast":{"absolutePath":"lib/safe-contracts/contracts/common/StorageAccessible.sol","id":58081,"exportedSymbols":{"StorageAccessible":[58080]},"nodeType":"SourceUnit","src":"42:2329:83","nodes":[{"id":58033,"nodeType":"PragmaDirective","src":"42:31:83","nodes":[],"literals":["solidity",">=","0.7",".0","<","0.9",".0"]},{"id":58080,"nodeType":"ContractDefinition","src":"445:1925:83","nodes":[{"id":58069,"nodeType":"FunctionDefinition","src":"785:464:83","nodes":[],"body":{"id":58068,"nodeType":"Block","src":"874:375:83","nodes":[],"statements":[{"assignments":[58045],"declarations":[{"constant":false,"id":58045,"mutability":"mutable","name":"result","nameLocation":"897:6:83","nodeType":"VariableDeclaration","scope":58068,"src":"884:19:83","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":58044,"name":"bytes","nodeType":"ElementaryTypeName","src":"884:5:83","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":58052,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":58050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":58048,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58039,"src":"916:6:83","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3332","id":58049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"925:2:83","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"916:11:83","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":58047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"906:9:83","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":58046,"name":"bytes","nodeType":"ElementaryTypeName","src":"910:5:83","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":58051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"906:22:83","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"884:44:83"},{"body":{"id":58064,"nodeType":"Block","src":"987:233:83","statements":[{"AST":{"nodeType":"YulBlock","src":"1070:140:83","statements":[{"nodeType":"YulVariableDeclaration","src":"1088:37:83","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1110:6:83"},{"name":"index","nodeType":"YulIdentifier","src":"1118:5:83"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1106:3:83"},"nodeType":"YulFunctionCall","src":"1106:18:83"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"1100:5:83"},"nodeType":"YulFunctionCall","src":"1100:25:83"},"variables":[{"name":"word","nodeType":"YulTypedName","src":"1092:4:83","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"1157:6:83"},{"kind":"number","nodeType":"YulLiteral","src":"1165:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1153:3:83"},"nodeType":"YulFunctionCall","src":"1153:17:83"},{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"1176:5:83"},{"kind":"number","nodeType":"YulLiteral","src":"1183:4:83","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1172:3:83"},"nodeType":"YulFunctionCall","src":"1172:16:83"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1149:3:83"},"nodeType":"YulFunctionCall","src":"1149:40:83"},{"name":"word","nodeType":"YulIdentifier","src":"1191:4:83"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1142:6:83"},"nodeType":"YulFunctionCall","src":"1142:54:83"},"nodeType":"YulExpressionStatement","src":"1142:54:83"}]},"evmVersion":"london","externalReferences":[{"declaration":58054,"isOffset":false,"isSlot":false,"src":"1118:5:83","valueSize":1},{"declaration":58054,"isOffset":false,"isSlot":false,"src":"1176:5:83","valueSize":1},{"declaration":58037,"isOffset":false,"isSlot":false,"src":"1110:6:83","valueSize":1},{"declaration":58045,"isOffset":false,"isSlot":false,"src":"1157:6:83","valueSize":1}],"id":58063,"nodeType":"InlineAssembly","src":"1061:149:83"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":58059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":58057,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58054,"src":"962:5:83","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":58058,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58039,"src":"970:6:83","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"962:14:83","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":58065,"initializationExpression":{"assignments":[58054],"declarations":[{"constant":false,"id":58054,"mutability":"mutable","name":"index","nameLocation":"951:5:83","nodeType":"VariableDeclaration","scope":58065,"src":"943:13:83","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58053,"name":"uint256","nodeType":"ElementaryTypeName","src":"943:7:83","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":58056,"initialValue":{"hexValue":"30","id":58055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"959:1:83","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"943:17:83"},"loopExpression":{"expression":{"id":58061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"978:7:83","subExpression":{"id":58060,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58054,"src":"978:5:83","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":58062,"nodeType":"ExpressionStatement","src":"978:7:83"},"nodeType":"ForStatement","src":"938:282:83"},{"expression":{"id":58066,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58045,"src":"1236:6:83","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":58043,"id":58067,"nodeType":"Return","src":"1229:13:83"}]},"documentation":{"id":58035,"nodeType":"StructuredDocumentation","src":"487:293:83","text":" @notice Reads `length` bytes of storage in the currents contract\n @param offset - the offset in the current contract's storage in words to start reading from\n @param length - the number of words (32 bytes) of data to read\n @return the bytes that were read."},"functionSelector":"5624b25b","implemented":true,"kind":"function","modifiers":[],"name":"getStorageAt","nameLocation":"794:12:83","parameters":{"id":58040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58037,"mutability":"mutable","name":"offset","nameLocation":"815:6:83","nodeType":"VariableDeclaration","scope":58069,"src":"807:14:83","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58036,"name":"uint256","nodeType":"ElementaryTypeName","src":"807:7:83","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58039,"mutability":"mutable","name":"length","nameLocation":"831:6:83","nodeType":"VariableDeclaration","scope":58069,"src":"823:14:83","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58038,"name":"uint256","nodeType":"ElementaryTypeName","src":"823:7:83","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"806:32:83"},"returnParameters":{"id":58043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58042,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":58069,"src":"860:12:83","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":58041,"name":"bytes","nodeType":"ElementaryTypeName","src":"860:5:83","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"859:14:83"},"scope":58080,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":58079,"nodeType":"FunctionDefinition","src":"1882:486:83","nodes":[],"body":{"id":58078,"nodeType":"Block","src":"1972:396:83","nodes":[],"statements":[{"AST":{"nodeType":"YulBlock","src":"2047:315:83","statements":[{"nodeType":"YulVariableDeclaration","src":"2061:108:83","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"2089:3:83"},"nodeType":"YulFunctionCall","src":"2089:5:83"},{"name":"targetContract","nodeType":"YulIdentifier","src":"2096:14:83"},{"arguments":[{"name":"calldataPayload","nodeType":"YulIdentifier","src":"2116:15:83"},{"kind":"number","nodeType":"YulLiteral","src":"2133:4:83","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2112:3:83"},"nodeType":"YulFunctionCall","src":"2112:26:83"},{"arguments":[{"name":"calldataPayload","nodeType":"YulIdentifier","src":"2146:15:83"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2140:5:83"},"nodeType":"YulFunctionCall","src":"2140:22:83"},{"kind":"number","nodeType":"YulLiteral","src":"2164:1:83","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2167:1:83","type":"","value":"0"}],"functionName":{"name":"delegatecall","nodeType":"YulIdentifier","src":"2076:12:83"},"nodeType":"YulFunctionCall","src":"2076:93:83"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"2065:7:83","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2190:4:83","type":"","value":"0x00"},{"name":"success","nodeType":"YulIdentifier","src":"2196:7:83"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2183:6:83"},"nodeType":"YulFunctionCall","src":"2183:21:83"},"nodeType":"YulExpressionStatement","src":"2183:21:83"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2224:4:83","type":"","value":"0x20"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2230:14:83"},"nodeType":"YulFunctionCall","src":"2230:16:83"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2217:6:83"},"nodeType":"YulFunctionCall","src":"2217:30:83"},"nodeType":"YulExpressionStatement","src":"2217:30:83"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2275:4:83","type":"","value":"0x40"},{"kind":"number","nodeType":"YulLiteral","src":"2281:1:83","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2284:14:83"},"nodeType":"YulFunctionCall","src":"2284:16:83"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"2260:14:83"},"nodeType":"YulFunctionCall","src":"2260:41:83"},"nodeType":"YulExpressionStatement","src":"2260:41:83"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2321:1:83","type":"","value":"0"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2328:14:83"},"nodeType":"YulFunctionCall","src":"2328:16:83"},{"kind":"number","nodeType":"YulLiteral","src":"2346:4:83","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2324:3:83"},"nodeType":"YulFunctionCall","src":"2324:27:83"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2314:6:83"},"nodeType":"YulFunctionCall","src":"2314:38:83"},"nodeType":"YulExpressionStatement","src":"2314:38:83"}]},"evmVersion":"london","externalReferences":[{"declaration":58074,"isOffset":false,"isSlot":false,"src":"2116:15:83","valueSize":1},{"declaration":58074,"isOffset":false,"isSlot":false,"src":"2146:15:83","valueSize":1},{"declaration":58072,"isOffset":false,"isSlot":false,"src":"2096:14:83","valueSize":1}],"id":58077,"nodeType":"InlineAssembly","src":"2038:324:83"}]},"documentation":{"id":58070,"nodeType":"StructuredDocumentation","src":"1255:622:83","text":" @dev Performs a delegatecall on a targetContract in the context of self.\n Internally reverts execution to avoid side effects (making it static).\n This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\n Specifically, the `returndata` after a call to this method will be:\n `success:bool || response.length:uint256 || response:bytes`.\n @param targetContract Address of the contract containing the code to execute.\n @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments)."},"functionSelector":"b4faba09","implemented":true,"kind":"function","modifiers":[],"name":"simulateAndRevert","nameLocation":"1891:17:83","parameters":{"id":58075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58072,"mutability":"mutable","name":"targetContract","nameLocation":"1917:14:83","nodeType":"VariableDeclaration","scope":58079,"src":"1909:22:83","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":58071,"name":"address","nodeType":"ElementaryTypeName","src":"1909:7:83","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":58074,"mutability":"mutable","name":"calldataPayload","nameLocation":"1946:15:83","nodeType":"VariableDeclaration","scope":58079,"src":"1933:28:83","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":58073,"name":"bytes","nodeType":"ElementaryTypeName","src":"1933:5:83","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1908:54:83"},"returnParameters":{"id":58076,"nodeType":"ParameterList","parameters":[],"src":"1972:0:83"},"scope":58080,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":true,"baseContracts":[],"canonicalName":"StorageAccessible","contractDependencies":[],"contractKind":"contract","documentation":{"id":58034,"nodeType":"StructuredDocumentation","src":"75:369:83","text":" @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\n @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\n         It removes a method from the original contract not needed for the Safe contracts.\n @author Gnosis Developers"},"fullyImplemented":true,"linearizedBaseContracts":[58080],"name":"StorageAccessible","nameLocation":"463:17:83","scope":58081,"usedErrors":[]}],"license":"LGPL-3.0-only"},"id":83}
{"abi":[{"type":"constructor","inputs":[{"name":"_optimistInviter","type":"address","internalType":"contract OptimistInviter"},{"name":"_name","type":"string","internalType":"string"}],"stateMutability":"nonpayable"},{"type":"function","name":"CLAIMABLE_INVITE_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"EIP712_DOMAIN_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"consumeNonce","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"currentNonce","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getClaimableInviteStructHash","inputs":[{"name":"_claimableInvite","type":"tuple","internalType":"struct OptimistInviter.ClaimableInvite","components":[{"name":"issuer","type":"address","internalType":"address"},{"name":"nonce","type":"bytes32","internalType":"bytes32"}]}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"getClaimableInviteWithNewNonce","inputs":[{"name":"_issuer","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct OptimistInviter.ClaimableInvite","components":[{"name":"issuer","type":"address","internalType":"address"},{"name":"nonce","type":"bytes32","internalType":"bytes32"}]}],"stateMutability":"nonpayable"},{"type":"function","name":"getDigest","inputs":[{"name":"_claimableInvite","type":"tuple","internalType":"struct OptimistInviter.ClaimableInvite","components":[{"name":"issuer","type":"address","internalType":"address"},{"name":"nonce","type":"bytes32","internalType":"bytes32"}]}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getDigestWithEIP712Domain","inputs":[{"name":"_claimableInvite","type":"tuple","internalType":"struct OptimistInviter.ClaimableInvite","components":[{"name":"issuer","type":"address","internalType":"address"},{"name":"nonce","type":"bytes32","internalType":"bytes32"}]},{"name":"_name","type":"bytes","internalType":"bytes"},{"name":"_version","type":"bytes","internalType":"bytes"},{"name":"_chainid","type":"uint256","internalType":"uint256"},{"name":"_verifyingContract","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"optimistInviter","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract OptimistInviter"}],"stateMutability":"view"}],"bytecode":{"object":"0x60806040523480156200001157600080fd5b5060405162000d3138038062000d3183398101604081905262000034916200007c565b600080546001600160a01b0319166001600160a01b03841617905560016200005d82826200020b565b505050620002d7565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200009057600080fd5b82516001600160a01b0381168114620000a857600080fd5b602084810151919350906001600160401b0380821115620000c857600080fd5b818601915086601f830112620000dd57600080fd5b815181811115620000f257620000f262000066565b604051601f8201601f19908116603f011681019083821181831017156200011d576200011d62000066565b8160405282815289868487010111156200013657600080fd5b600093505b828410156200015a57848401860151818501870152928501926200013b565b828411156200016c5760008684830101525b8096505050505050509250929050565b600181811c908216806200019157607f821691505b602082108103620001b257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200020657600081815260208120601f850160051c81016020861015620001e15750805b601f850160051c820191505b818110156200020257828155600101620001ed565b5050505b505050565b81516001600160401b0381111562000227576200022762000066565b6200023f816200023884546200017c565b84620001b8565b602080601f8311600181146200027757600084156200025e5750858301515b600019600386901b1c1916600185901b17855562000202565b600085815260208120601f198616915b82811015620002a85788860151825594840194600190910190840162000287565b5085821015620002c75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610a4a80620002e76000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063adb610a311610076578063c7977be71161005b578063c7977be71461018d578063d1829907146101b4578063eb1df626146101f957600080fd5b8063adb610a31461015d578063c4fc453d1461016657600080fd5b80631c6e7f25116100a75780631c6e7f25146100fe57806334b15118146101115780638ebe24e51461011957600080fd5b8063019a4f49146100c357806306fdde03146100e9575b600080fd5b6100d66100d1366004610774565b61020c565b6040519081526020015b60405180910390f35b6100f1610315565b6040516100e09190610834565b6100d661010c366004610885565b6103a3565b6100d661050c565b61012c6101273660046108a8565b61054e565b60408051825173ffffffffffffffffffffffffffffffffffffffff16815260209283015192810192909252016100e0565b6100d660025481565b6100d67f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce81565b6100d67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6000546101d49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e0565b6100d66102073660046108c3565b610599565b8351602080860191909120845185830120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9481019490945283019190915260608201526080810183905273ffffffffffffffffffffffffffffffffffffffff821660a0820152600090819060c00160405160208183030381529060405280519060200120905061030a816102af8980360381019061020791906108c3565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b979650505050505050565b600180546103229061091a565b80601f016020809104026020016040519081016040528092919081815260200182805461034e9061091a565b801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b505050505081565b600061050682600180546103b69061091a565b80601f01602080910402602001604051908101604052809291908181526020018280546103e29061091a565b801561042f5780601f106104045761010080835404028352916020019161042f565b820191906000526020600020905b81548152906001019060200180831161041257829003601f168201915b505060008054604080517feccec5a8000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216955063eccec5a8945060048082019450908290030181865afa1580156104a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104e69190810190610967565b600054469073ffffffffffffffffffffffffffffffffffffffff1661020c565b92915050565b600280546000918261051d836109de565b9190505560405160200161053391815260200190565b60405160208183030381529060405280519060200120905090565b604080518082019091526000808252602082015260405180604001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200161059161050c565b905292915050565b80516020808301516040516000936105fc937f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce9391920192835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001209050919050565b60006040828403121561062b57600080fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156106a7576106a7610631565b604052919050565b600067ffffffffffffffff8211156106c9576106c9610631565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261070657600080fd5b8135610719610714826106af565b610660565b81815284602083860101111561072e57600080fd5b816020850160208301376000918101602001919091529392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461076f57600080fd5b919050565b600080600080600060c0868803121561078c57600080fd5b6107968787610619565b9450604086013567ffffffffffffffff808211156107b357600080fd5b6107bf89838a016106f5565b955060608801359150808211156107d557600080fd5b506107e2888289016106f5565b935050608086013591506107f860a0870161074b565b90509295509295909350565b60005b8381101561081f578181015183820152602001610807565b8381111561082e576000848401525b50505050565b6020815260008251806020840152610853816040850160208701610804565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006040828403121561089757600080fd5b6108a18383610619565b9392505050565b6000602082840312156108ba57600080fd5b6108a18261074b565b6000604082840312156108d557600080fd5b6040516040810181811067ffffffffffffffff821117156108f8576108f8610631565b6040526109048361074b565b8152602083013560208201528091505092915050565b600181811c9082168061092e57607f821691505b60208210810361062b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006020828403121561097957600080fd5b815167ffffffffffffffff81111561099057600080fd5b8201601f810184136109a157600080fd5b80516109af610714826106af565b8181528560208385010111156109c457600080fd5b6109d5826020830160208601610804565b95945050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a36577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea164736f6c634300080f000a","sourceMap":"437:3808:298:-:0;;;1255:140;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1332:15;:34;;-1:-1:-1;;;;;;1332:34:298;-1:-1:-1;;;;;1332:34:298;;;;;-1:-1:-1;1376:12:298;1383:5;-1:-1:-1;1376:12:298;:::i;:::-;;1255:140;;437:3808;;14:127:334;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1279;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;363:16;;-1:-1:-1;;;;;408:31:334;;398:42;;388:70;;454:1;451;444:12;388:70;501:2;532:18;;;526:25;477:5;;-1:-1:-1;501:2:334;-1:-1:-1;;;;;600:14:334;;;597:34;;;627:1;624;617:12;597:34;665:6;654:9;650:22;640:32;;710:7;703:4;699:2;695:13;691:27;681:55;;732:1;729;722:12;681:55;761:2;755:9;783:2;779;776:10;773:36;;;789:18;;:::i;:::-;864:2;858:9;832:2;918:13;;-1:-1:-1;;914:22:334;;;938:2;910:31;906:40;894:53;;;962:18;;;982:22;;;959:46;956:72;;;1008:18;;:::i;:::-;1048:10;1044:2;1037:22;1083:2;1075:6;1068:18;1123:7;1118:2;1113;1109;1105:11;1101:20;1098:33;1095:53;;;1144:1;1141;1134:12;1095:53;1166:1;1157:10;;1176:129;1190:2;1187:1;1184:9;1176:129;;;1278:10;;;1274:19;;1268:26;1247:14;;;1243:23;;1236:59;1201:10;;;;1176:129;;;1323:2;1320:1;1317:9;1314:80;;;1382:1;1377:2;1372;1364:6;1360:15;1356:24;1349:35;1314:80;1413:6;1403:16;;;;;;;;146:1279;;;;;:::o;1430:380::-;1509:1;1505:12;;;;1552;;;1573:61;;1627:4;1619:6;1615:17;1605:27;;1573:61;1680:2;1672:6;1669:14;1649:18;1646:38;1643:161;;1726:10;1721:3;1717:20;1714:1;1707:31;1761:4;1758:1;1751:15;1789:4;1786:1;1779:15;1643:161;;1430:380;;;:::o;1941:545::-;2043:2;2038:3;2035:11;2032:448;;;2079:1;2104:5;2100:2;2093:17;2149:4;2145:2;2135:19;2219:2;2207:10;2203:19;2200:1;2196:27;2190:4;2186:38;2255:4;2243:10;2240:20;2237:47;;;-1:-1:-1;2278:4:334;2237:47;2333:2;2328:3;2324:12;2321:1;2317:20;2311:4;2307:31;2297:41;;2388:82;2406:2;2399:5;2396:13;2388:82;;;2451:17;;;2432:1;2421:13;2388:82;;;2392:3;;;2032:448;1941:545;;;:::o;2662:1352::-;2782:10;;-1:-1:-1;;;;;2804:30:334;;2801:56;;;2837:18;;:::i;:::-;2866:97;2956:6;2916:38;2948:4;2942:11;2916:38;:::i;:::-;2910:4;2866:97;:::i;:::-;3018:4;;3082:2;3071:14;;3099:1;3094:663;;;;3801:1;3818:6;3815:89;;;-1:-1:-1;3870:19:334;;;3864:26;3815:89;-1:-1:-1;;2619:1:334;2615:11;;;2611:24;2607:29;2597:40;2643:1;2639:11;;;2594:57;3917:81;;3064:944;;3094:663;1888:1;1881:14;;;1925:4;1912:18;;-1:-1:-1;;3130:20:334;;;3248:236;3262:7;3259:1;3256:14;3248:236;;;3351:19;;;3345:26;3330:42;;3443:27;;;;3411:1;3399:14;;;;3278:19;;3248:236;;;3252:3;3512:6;3503:7;3500:19;3497:201;;;3573:19;;;3567:26;-1:-1:-1;;3656:1:334;3652:14;;;3668:3;3648:24;3644:37;3640:42;3625:58;3610:74;;3497:201;-1:-1:-1;;;;;3744:1:334;3728:14;;;3724:22;3711:36;;-1:-1:-1;2662:1352:334:o;:::-;437:3808:298;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063adb610a311610076578063c7977be71161005b578063c7977be71461018d578063d1829907146101b4578063eb1df626146101f957600080fd5b8063adb610a31461015d578063c4fc453d1461016657600080fd5b80631c6e7f25116100a75780631c6e7f25146100fe57806334b15118146101115780638ebe24e51461011957600080fd5b8063019a4f49146100c357806306fdde03146100e9575b600080fd5b6100d66100d1366004610774565b61020c565b6040519081526020015b60405180910390f35b6100f1610315565b6040516100e09190610834565b6100d661010c366004610885565b6103a3565b6100d661050c565b61012c6101273660046108a8565b61054e565b60408051825173ffffffffffffffffffffffffffffffffffffffff16815260209283015192810192909252016100e0565b6100d660025481565b6100d67f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce81565b6100d67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6000546101d49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e0565b6100d66102073660046108c3565b610599565b8351602080860191909120845185830120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9481019490945283019190915260608201526080810183905273ffffffffffffffffffffffffffffffffffffffff821660a0820152600090819060c00160405160208183030381529060405280519060200120905061030a816102af8980360381019061020791906108c3565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b979650505050505050565b600180546103229061091a565b80601f016020809104026020016040519081016040528092919081815260200182805461034e9061091a565b801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b505050505081565b600061050682600180546103b69061091a565b80601f01602080910402602001604051908101604052809291908181526020018280546103e29061091a565b801561042f5780601f106104045761010080835404028352916020019161042f565b820191906000526020600020905b81548152906001019060200180831161041257829003601f168201915b505060008054604080517feccec5a8000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216955063eccec5a8945060048082019450908290030181865afa1580156104a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104e69190810190610967565b600054469073ffffffffffffffffffffffffffffffffffffffff1661020c565b92915050565b600280546000918261051d836109de565b9190505560405160200161053391815260200190565b60405160208183030381529060405280519060200120905090565b604080518082019091526000808252602082015260405180604001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200161059161050c565b905292915050565b80516020808301516040516000936105fc937f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce9391920192835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001209050919050565b60006040828403121561062b57600080fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156106a7576106a7610631565b604052919050565b600067ffffffffffffffff8211156106c9576106c9610631565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261070657600080fd5b8135610719610714826106af565b610660565b81815284602083860101111561072e57600080fd5b816020850160208301376000918101602001919091529392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461076f57600080fd5b919050565b600080600080600060c0868803121561078c57600080fd5b6107968787610619565b9450604086013567ffffffffffffffff808211156107b357600080fd5b6107bf89838a016106f5565b955060608801359150808211156107d557600080fd5b506107e2888289016106f5565b935050608086013591506107f860a0870161074b565b90509295509295909350565b60005b8381101561081f578181015183820152602001610807565b8381111561082e576000848401525b50505050565b6020815260008251806020840152610853816040850160208701610804565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006040828403121561089757600080fd5b6108a18383610619565b9392505050565b6000602082840312156108ba57600080fd5b6108a18261074b565b6000604082840312156108d557600080fd5b6040516040810181811067ffffffffffffffff821117156108f8576108f8610631565b6040526109048361074b565b8152602083013560208201528091505092915050565b600181811c9082168061092e57607f821691505b60208210810361062b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006020828403121561097957600080fd5b815167ffffffffffffffff81111561099057600080fd5b8201601f810184136109a157600080fd5b80516109af610714826106af565b8181528560208385010111156109c457600080fd5b6109d5826020830160208601610804565b95945050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a36577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea164736f6c634300080f000a","sourceMap":"437:3808:298:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3674:569;;;;;;:::i;:::-;;:::i;:::-;;;2606:25:334;;;2594:2;2579:18;3674:569:298;;;;;;;;1111:18;;;:::i;:::-;;;;;;;:::i;2770:340::-;;;;;;:::i;:::-;;:::i;2060:119::-;;;:::i;2388:193::-;;;;;;:::i;:::-;;:::i;:::-;;;;4039:13:334;;4054:42;4035:62;4017:81;;4154:4;4142:17;;;4136:24;4114:20;;;4107:54;;;;3990:18;2388:193:298;3803:364:334;1221:27:298;;;;;;536:110;;588:58;536:110;;754:152;;811:95;754:152;;981:38;;;;;;;;;;;;4555:42:334;4543:55;;;4525:74;;4513:2;4498:18;981:38:298;4354:251:334;1572:274:298;;;;;;:::i;:::-;;:::i;3674:569::-;4055:16;;;;;;;;;;4073:19;;;;;;4020:103;;;811:95;4020:103;;;5393:25:334;;;;5434:18;;5427:34;;;;5477:18;;;5470:34;5520:18;;;5513:34;;;5596:42;5584:55;;5563:19;;;5556:84;3948:7:298;;;;5365:19:334;;4020:103:298;;;;;;;;;;;;3997:136;;;;;;3971:162;;4150:86;4172:15;4189:46;4218:16;4189:46;;;;;;;;;;:::i;:::-;8677:57:61;;7730:66:334;8677:57:61;;;7718:79:334;7813:11;;;7806:27;;;7849:12;;;7842:28;;;8641:7:61;;7886:12:334;;8677:57:61;;;;;;;;;;;;8667:68;;;;;;8660:75;;8548:194;;;;;4150:86:298;4143:93;3674:569;-1:-1:-1;;;;;;;3674:569:298:o;1111:18::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2770:340::-;2869:7;2895:208;2934:16;2970:4;2895:208;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2995:15:298;;;:32;;;;;;;;:15;;;;;-1:-1:-1;2995:30:298;;-1:-1:-1;2995:32:298;;;;;-1:-1:-1;2995:32:298;;;;;;:15;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3077:15;;3042:13;;3077:15;;2895:25;:208::i;:::-;2888:215;2770:340;-1:-1:-1;;2770:340:298:o;2060:119::-;2155:12;:14;;2100:7;;;2155:14;;;:::i;:::-;;;;;2144:26;;;;;;2606:25:334;;2594:2;2579:18;;2460:177;2144:26:298;;;;;;;;;;;;;2134:37;;;;;;2119:53;;2060:119;:::o;2388:193::-;-1:-1:-1;;;;;;;;;;;;;;;;;2518:56:298;;;;;;;;2550:7;2518:56;;;;;;2559:14;:12;:14::i;:::-;2518:56;;2511:63;2388:193;-1:-1:-1;;2388:193:298:o;1572:274::-;1790:23;;1815:22;;;;;1752:86;;1712:7;;1752:86;;588:58;;1790:23;;1752:86;7289:25:334;;;7362:42;7350:55;;;;7345:2;7330:18;;7323:83;7437:2;7422:18;;7415:34;7277:2;7262:18;;7087:368;1752:86:298;;;;;;;;;;;;;1742:97;;;;;;1735:104;;1572:274;;;:::o;14:163:334:-;82:5;127:2;118:6;113:3;109:16;105:25;102:45;;;143:1;140;133:12;102:45;-1:-1:-1;165:6:334;14:163;-1:-1:-1;14:163:334:o;182:184::-;234:77;231:1;224:88;331:4;328:1;321:15;355:4;352:1;345:15;371:334;442:2;436:9;498:2;488:13;;503:66;484:86;472:99;;601:18;586:34;;622:22;;;583:62;580:88;;;648:18;;:::i;:::-;684:2;677:22;371:334;;-1:-1:-1;371:334:334:o;710:245::-;758:4;791:18;783:6;780:30;777:56;;;813:18;;:::i;:::-;-1:-1:-1;870:2:334;858:15;875:66;854:88;944:4;850:99;;710:245::o;960:462::-;1002:5;1055:3;1048:4;1040:6;1036:17;1032:27;1022:55;;1073:1;1070;1063:12;1022:55;1109:6;1096:20;1140:48;1156:31;1184:2;1156:31;:::i;:::-;1140:48;:::i;:::-;1213:2;1204:7;1197:19;1259:3;1252:4;1247:2;1239:6;1235:15;1231:26;1228:35;1225:55;;;1276:1;1273;1266:12;1225:55;1341:2;1334:4;1326:6;1322:17;1315:4;1306:7;1302:18;1289:55;1389:1;1364:16;;;1382:4;1360:27;1353:38;;;;1368:7;960:462;-1:-1:-1;;;960:462:334:o;1427:196::-;1495:20;;1555:42;1544:54;;1534:65;;1524:93;;1613:1;1610;1603:12;1524:93;1427:196;;;:::o;1628:827::-;1777:6;1785;1793;1801;1809;1862:3;1850:9;1841:7;1837:23;1833:33;1830:53;;;1879:1;1876;1869:12;1830:53;1902:62;1956:7;1945:9;1902:62;:::i;:::-;1892:72;;2015:2;2004:9;2000:18;1987:32;2038:18;2079:2;2071:6;2068:14;2065:34;;;2095:1;2092;2085:12;2065:34;2118:49;2159:7;2150:6;2139:9;2135:22;2118:49;:::i;:::-;2108:59;;2220:2;2209:9;2205:18;2192:32;2176:48;;2249:2;2239:8;2236:16;2233:36;;;2265:1;2262;2255:12;2233:36;;2288:51;2331:7;2320:8;2309:9;2305:24;2288:51;:::i;:::-;2278:61;;;2386:3;2375:9;2371:19;2358:33;2348:43;;2410:39;2444:3;2433:9;2429:19;2410:39;:::i;:::-;2400:49;;1628:827;;;;;;;;:::o;2642:258::-;2714:1;2724:113;2738:6;2735:1;2732:13;2724:113;;;2814:11;;;2808:18;2795:11;;;2788:39;2760:2;2753:10;2724:113;;;2855:6;2852:1;2849:13;2846:48;;;2890:1;2881:6;2876:3;2872:16;2865:27;2846:48;;2642:258;;;:::o;2905:442::-;3054:2;3043:9;3036:21;3017:4;3086:6;3080:13;3129:6;3124:2;3113:9;3109:18;3102:34;3145:66;3204:6;3199:2;3188:9;3184:18;3179:2;3171:6;3167:15;3145:66;:::i;:::-;3263:2;3251:15;3268:66;3247:88;3232:104;;;;3338:2;3228:113;;2905:442;-1:-1:-1;;2905:442:334:o;3352:255::-;3447:6;3500:2;3488:9;3479:7;3475:23;3471:32;3468:52;;;3516:1;3513;3506:12;3468:52;3539:62;3593:7;3582:9;3539:62;:::i;:::-;3529:72;3352:255;-1:-1:-1;;;3352:255:334:o;3612:186::-;3671:6;3724:2;3712:9;3703:7;3699:23;3695:32;3692:52;;;3740:1;3737;3730:12;3692:52;3763:29;3782:9;3763:29;:::i;4610:519::-;4703:6;4756:2;4744:9;4735:7;4731:23;4727:32;4724:52;;;4772:1;4769;4762:12;4724:52;4805:2;4799:9;4847:2;4839:6;4835:15;4916:6;4904:10;4901:22;4880:18;4868:10;4865:34;4862:62;4859:88;;;4927:18;;:::i;:::-;4963:2;4956:22;5002:29;5021:9;5002:29;:::i;:::-;4994:6;4987:45;5093:2;5082:9;5078:18;5065:32;5060:2;5052:6;5048:15;5041:57;5117:6;5107:16;;;4610:519;;;;:::o;5651:437::-;5730:1;5726:12;;;;5773;;;5794:61;;5848:4;5840:6;5836:17;5826:27;;5794:61;5901:2;5893:6;5890:14;5870:18;5867:38;5864:218;;5938:77;5935:1;5928:88;6039:4;6036:1;6029:15;6067:4;6064:1;6057:15;6093:635;6173:6;6226:2;6214:9;6205:7;6201:23;6197:32;6194:52;;;6242:1;6239;6232:12;6194:52;6275:9;6269:16;6308:18;6300:6;6297:30;6294:50;;;6340:1;6337;6330:12;6294:50;6363:22;;6416:4;6408:13;;6404:27;-1:-1:-1;6394:55:334;;6445:1;6442;6435:12;6394:55;6474:2;6468:9;6499:48;6515:31;6543:2;6515:31;:::i;6499:48::-;6570:2;6563:5;6556:17;6610:7;6605:2;6600;6596;6592:11;6588:20;6585:33;6582:53;;;6631:1;6628;6621:12;6582:53;6644:54;6695:2;6690;6683:5;6679:14;6674:2;6670;6666:11;6644:54;:::i;:::-;6717:5;6093:635;-1:-1:-1;;;;;6093:635:334:o;6733:349::-;6772:3;6803:66;6796:5;6793:77;6790:257;;6903:77;6900:1;6893:88;7004:4;7001:1;6994:15;7032:4;7029:1;7022:15;6790:257;-1:-1:-1;7074:1:334;7063:13;;6733:349::o","linkReferences":{}},"methodIdentifiers":{"CLAIMABLE_INVITE_TYPEHASH()":"c4fc453d","EIP712_DOMAIN_TYPEHASH()":"c7977be7","consumeNonce()":"34b15118","currentNonce()":"adb610a3","getClaimableInviteStructHash((address,bytes32))":"eb1df626","getClaimableInviteWithNewNonce(address)":"8ebe24e5","getDigest((address,bytes32))":"1c6e7f25","getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)":"019a4f49","name()":"06fdde03","optimistInviter()":"d1829907"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OptimistInviter\",\"name\":\"_optimistInviter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CLAIMABLE_INVITE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumeNonce\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"_claimableInvite\",\"type\":\"tuple\"}],\"name\":\"getClaimableInviteStructHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"getClaimableInviteWithNewNonce\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"_claimableInvite\",\"type\":\"tuple\"}],\"name\":\"getDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"_claimableInvite\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_version\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_chainid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_verifyingContract\",\"type\":\"address\"}],\"name\":\"getDigestWithEIP712Domain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimistInviter\",\"outputs\":[{\"internalType\":\"contract OptimistInviter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"consumeNonce()\":{\"returns\":{\"_0\":\"Nonce that should be used as part of ClaimableInvite.\"}},\"getClaimableInviteStructHash((address,bytes32))\":{\"params\":{\"_claimableInvite\":\"ClaimableInvite struct to hash.\"},\"returns\":{\"_0\":\"EIP-712 typed struct hash.\"}},\"getClaimableInviteWithNewNonce(address)\":{\"params\":{\"_issuer\":\"Issuer to include in the ClaimableInvite.\"},\"returns\":{\"_0\":\"ClaimableInvite that can be hashed & signed.\"}},\"getDigest((address,bytes32))\":{\"params\":{\"_claimableInvite\":\"ClaimableInvite struct to hash.\"},\"returns\":{\"_0\":\"EIP-712 compatible digest.\"}},\"getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)\":{\"params\":{\"_chainid\":\"Chain ID to use in the EIP712 domain.\",\"_claimableInvite\":\"ClaimableInvite struct to hash.\",\"_name\":\"Contract name to use in the EIP712 domain.\",\"_verifyingContract\":\"Address to use in the EIP712 domain.\",\"_version\":\"Contract version to use in the EIP712 domain.\"},\"returns\":{\"_0\":\"EIP-712 compatible digest.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CLAIMABLE_INVITE_TYPEHASH()\":{\"notice\":\"EIP712 typehash for the ClaimableInvite type.\"},\"EIP712_DOMAIN_TYPEHASH()\":{\"notice\":\"EIP712 typehash for the EIP712Domain type that is included as part of the signature.\"},\"consumeNonce()\":{\"notice\":\"Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.\"},\"currentNonce()\":{\"notice\":\"Keeps track of current nonce to generate new nonces for each invite.\"},\"getClaimableInviteStructHash((address,bytes32))\":{\"notice\":\"Returns the hash of the struct ClaimableInvite.\"},\"getClaimableInviteWithNewNonce(address)\":{\"notice\":\"Returns a ClaimableInvite with the issuer and current nonce.\"},\"getDigest((address,bytes32))\":{\"notice\":\"Computes the EIP712 digest with default correct parameters.\"},\"getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)\":{\"notice\":\"Computes the EIP712 digest with the given domain parameters.         Used for testing that different domain parameters fail.\"},\"name()\":{\"notice\":\"OptimistInviter contract name. Used to construct the EIP-712 domain.\"},\"optimistInviter()\":{\"notice\":\"Address of OptimistInviter contract we are testing.\"}},\"notice\":\"Simple helper contract that helps with testing flow and signature for         OptimistInviter contract. Made this a separate contract instead of including         in OptimistInviter.t.sol for reusability.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/mocks/OptimistInviterHelper.sol\":\"OptimistInviterHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@lib-keccak/=lib/lib-keccak/contracts/lib/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":@solady-test/=lib/lib-keccak/lib/solady/test/\",\":@solady/=lib/lib-keccak/lib/solady/src/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/\",\":lib-keccak/=lib/lib-keccak/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solady/=lib/solady/src/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb\",\"dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://371fd95bad4416766089d3e621dee1fd86fece2b266ad3f9443fefe567e24e94\",\"dweb:/ipfs/QmNciwwtGev3Q8uVhnoE5PQUSCDpMp6KtVjiDgnGdqLmWX\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e\",\"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900\",\"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol\":{\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b\",\"dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe\"]},\"src/periphery/op-nft/AttestationStation.sol\":{\"keccak256\":\"0x756accab2fc86dbe076dc340af05c06c732815392a8cbab6524dc971d4957208\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a4bf7f1a162318d31c39a4d34d46ada80cdacd51c24a110f411ec245c1b6a4ef\",\"dweb:/ipfs/QmScehXXWTKDnUr9ohMb1o8zButujNP9SDAWRSnDy6jpdK\"]},\"src/periphery/op-nft/OptimistInviter.sol\":{\"keccak256\":\"0x9d798824a1bdd45ffc46123f3fd8fd1e7855a05df52dcfc134f5f10db6fa57eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bc646a72c4db3f3b68c5935cfd8d067897af83f7d788c2cdeb47bf9f3ced2c9\",\"dweb:/ipfs/QmQjRhFArSuWgMmCbS8ZLrAr1njHort2dMBpa1eDx4Geu7\"]},\"src/periphery/op-nft/libraries/OptimistConstants.sol\":{\"keccak256\":\"0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268\",\"dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2\"]},\"src/universal/ISemver.sol\":{\"keccak256\":\"0xba34562a8026f59886d2e07d1d58d90b9691d00e0788c6263cef6c22740cab44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0826f998632f83c103c3085bf2e872db79a69022b6d2e0444c83a64ca5283c2a\",\"dweb:/ipfs/QmcJ7PNqkAfKqbjFGRordtAg1v9DvcBSKvdTkVvciLyvQR\"]},\"test/mocks/OptimistInviterHelper.sol\":{\"keccak256\":\"0x37b0384a78d2fd80b07ab3e85f2b435f50ab384704a3ff43816844777e218a15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://56b1f2bc10927cfcd6883733a5863383803ef96f899802cd853f23fea351d77e\",\"dweb:/ipfs/QmfRrNFqU83SUoUGEWnBhCBc2YjAwSMSXp7c2vdo7vjE5p\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.15+commit.e14f2714"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract OptimistInviter","name":"_optimistInviter","type":"address"},{"internalType":"string","name":"_name","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"stateMutability":"view","type":"function","name":"CLAIMABLE_INVITE_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"EIP712_DOMAIN_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"consumeNonce","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"currentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct OptimistInviter.ClaimableInvite","name":"_claimableInvite","type":"tuple","components":[{"internalType":"address","name":"issuer","type":"address"},{"internalType":"bytes32","name":"nonce","type":"bytes32"}]}],"stateMutability":"pure","type":"function","name":"getClaimableInviteStructHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"_issuer","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"getClaimableInviteWithNewNonce","outputs":[{"internalType":"struct OptimistInviter.ClaimableInvite","name":"","type":"tuple","components":[{"internalType":"address","name":"issuer","type":"address"},{"internalType":"bytes32","name":"nonce","type":"bytes32"}]}]},{"inputs":[{"internalType":"struct OptimistInviter.ClaimableInvite","name":"_claimableInvite","type":"tuple","components":[{"internalType":"address","name":"issuer","type":"address"},{"internalType":"bytes32","name":"nonce","type":"bytes32"}]}],"stateMutability":"view","type":"function","name":"getDigest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"struct OptimistInviter.ClaimableInvite","name":"_claimableInvite","type":"tuple","components":[{"internalType":"address","name":"issuer","type":"address"},{"internalType":"bytes32","name":"nonce","type":"bytes32"}]},{"internalType":"bytes","name":"_name","type":"bytes"},{"internalType":"bytes","name":"_version","type":"bytes"},{"internalType":"uint256","name":"_chainid","type":"uint256"},{"internalType":"address","name":"_verifyingContract","type":"address"}],"stateMutability":"pure","type":"function","name":"getDigestWithEIP712Domain","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"optimistInviter","outputs":[{"internalType":"contract OptimistInviter","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"consumeNonce()":{"returns":{"_0":"Nonce that should be used as part of ClaimableInvite."}},"getClaimableInviteStructHash((address,bytes32))":{"params":{"_claimableInvite":"ClaimableInvite struct to hash."},"returns":{"_0":"EIP-712 typed struct hash."}},"getClaimableInviteWithNewNonce(address)":{"params":{"_issuer":"Issuer to include in the ClaimableInvite."},"returns":{"_0":"ClaimableInvite that can be hashed & signed."}},"getDigest((address,bytes32))":{"params":{"_claimableInvite":"ClaimableInvite struct to hash."},"returns":{"_0":"EIP-712 compatible digest."}},"getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)":{"params":{"_chainid":"Chain ID to use in the EIP712 domain.","_claimableInvite":"ClaimableInvite struct to hash.","_name":"Contract name to use in the EIP712 domain.","_verifyingContract":"Address to use in the EIP712 domain.","_version":"Contract version to use in the EIP712 domain."},"returns":{"_0":"EIP-712 compatible digest."}}},"version":1},"userdoc":{"kind":"user","methods":{"CLAIMABLE_INVITE_TYPEHASH()":{"notice":"EIP712 typehash for the ClaimableInvite type."},"EIP712_DOMAIN_TYPEHASH()":{"notice":"EIP712 typehash for the EIP712Domain type that is included as part of the signature."},"consumeNonce()":{"notice":"Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces."},"currentNonce()":{"notice":"Keeps track of current nonce to generate new nonces for each invite."},"getClaimableInviteStructHash((address,bytes32))":{"notice":"Returns the hash of the struct ClaimableInvite."},"getClaimableInviteWithNewNonce(address)":{"notice":"Returns a ClaimableInvite with the issuer and current nonce."},"getDigest((address,bytes32))":{"notice":"Computes the EIP712 digest with default correct parameters."},"getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)":{"notice":"Computes the EIP712 digest with the given domain parameters.         Used for testing that different domain parameters fail."},"name()":{"notice":"OptimistInviter contract name. Used to construct the EIP-712 domain."},"optimistInviter()":{"notice":"Address of OptimistInviter contract we are testing."}},"version":1}},"settings":{"remappings":["@cwia/=lib/clones-with-immutable-args/src/","@lib-keccak/=lib/lib-keccak/contracts/lib/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","@solady-test/=lib/lib-keccak/lib/solady/test/","@solady/=lib/lib-keccak/lib/solady/src/","clones-with-immutable-args/=lib/clones-with-immutable-args/src/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/","lib-keccak/=lib/lib-keccak/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/contracts/","solady/=lib/solady/src/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"test/mocks/OptimistInviterHelper.sol":"OptimistInviterHelper"},"evmVersion":"london","libraries":{}},"sources":{"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"keccak256":"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e","urls":["bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497","dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"keccak256":"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3","urls":["bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4","dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol":{"keccak256":"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863","urls":["bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c","dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol":{"keccak256":"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc","urls":["bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb","dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol":{"keccak256":"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc","urls":["bzz-raw://371fd95bad4416766089d3e621dee1fd86fece2b266ad3f9443fefe567e24e94","dweb:/ipfs/QmNciwwtGev3Q8uVhnoE5PQUSCDpMp6KtVjiDgnGdqLmWX"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol":{"keccak256":"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544","urls":["bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e","dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10","urls":["bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487","dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3","urls":["bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638","dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5","urls":["bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900","dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":{"keccak256":"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81","urls":["bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b","dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe"],"license":"MIT"},"src/periphery/op-nft/AttestationStation.sol":{"keccak256":"0x756accab2fc86dbe076dc340af05c06c732815392a8cbab6524dc971d4957208","urls":["bzz-raw://a4bf7f1a162318d31c39a4d34d46ada80cdacd51c24a110f411ec245c1b6a4ef","dweb:/ipfs/QmScehXXWTKDnUr9ohMb1o8zButujNP9SDAWRSnDy6jpdK"],"license":"MIT"},"src/periphery/op-nft/OptimistInviter.sol":{"keccak256":"0x9d798824a1bdd45ffc46123f3fd8fd1e7855a05df52dcfc134f5f10db6fa57eb","urls":["bzz-raw://7bc646a72c4db3f3b68c5935cfd8d067897af83f7d788c2cdeb47bf9f3ced2c9","dweb:/ipfs/QmQjRhFArSuWgMmCbS8ZLrAr1njHort2dMBpa1eDx4Geu7"],"license":"MIT"},"src/periphery/op-nft/libraries/OptimistConstants.sol":{"keccak256":"0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c","urls":["bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268","dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2"],"license":"MIT"},"src/universal/ISemver.sol":{"keccak256":"0xba34562a8026f59886d2e07d1d58d90b9691d00e0788c6263cef6c22740cab44","urls":["bzz-raw://0826f998632f83c103c3085bf2e872db79a69022b6d2e0444c83a64ca5283c2a","dweb:/ipfs/QmcJ7PNqkAfKqbjFGRordtAg1v9DvcBSKvdTkVvciLyvQR"],"license":"MIT"},"test/mocks/OptimistInviterHelper.sol":{"keccak256":"0x37b0384a78d2fd80b07ab3e85f2b435f50ab384704a3ff43816844777e218a15","urls":["bzz-raw://56b1f2bc10927cfcd6883733a5863383803ef96f899802cd853f23fea351d77e","dweb:/ipfs/QmfRrNFqU83SUoUGEWnBhCBc2YjAwSMSXp7c2vdo7vjE5p"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[{"astId":173460,"contract":"test/mocks/OptimistInviterHelper.sol:OptimistInviterHelper","label":"optimistInviter","offset":0,"slot":"0","type":"t_contract(OptimistInviter)98029"},{"astId":173463,"contract":"test/mocks/OptimistInviterHelper.sol:OptimistInviterHelper","label":"name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":173466,"contract":"test/mocks/OptimistInviterHelper.sol:OptimistInviterHelper","label":"currentNonce","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_contract(OptimistInviter)98029":{"encoding":"inplace","label":"contract OptimistInviter","numberOfBytes":"20"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"version":1,"kind":"user","methods":{"CLAIMABLE_INVITE_TYPEHASH()":{"notice":"EIP712 typehash for the ClaimableInvite type."},"EIP712_DOMAIN_TYPEHASH()":{"notice":"EIP712 typehash for the EIP712Domain type that is included as part of the signature."},"consumeNonce()":{"notice":"Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces."},"currentNonce()":{"notice":"Keeps track of current nonce to generate new nonces for each invite."},"getClaimableInviteStructHash((address,bytes32))":{"notice":"Returns the hash of the struct ClaimableInvite."},"getClaimableInviteWithNewNonce(address)":{"notice":"Returns a ClaimableInvite with the issuer and current nonce."},"getDigest((address,bytes32))":{"notice":"Computes the EIP712 digest with default correct parameters."},"getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)":{"notice":"Computes the EIP712 digest with the given domain parameters.         Used for testing that different domain parameters fail."},"name()":{"notice":"OptimistInviter contract name. Used to construct the EIP-712 domain."},"optimistInviter()":{"notice":"Address of OptimistInviter contract we are testing."}},"notice":"Simple helper contract that helps with testing flow and signature for         OptimistInviter contract. Made this a separate contract instead of including         in OptimistInviter.t.sol for reusability."},"devdoc":{"version":1,"kind":"dev","methods":{"consumeNonce()":{"returns":{"_0":"Nonce that should be used as part of ClaimableInvite."}},"getClaimableInviteStructHash((address,bytes32))":{"params":{"_claimableInvite":"ClaimableInvite struct to hash."},"returns":{"_0":"EIP-712 typed struct hash."}},"getClaimableInviteWithNewNonce(address)":{"params":{"_issuer":"Issuer to include in the ClaimableInvite."},"returns":{"_0":"ClaimableInvite that can be hashed & signed."}},"getDigest((address,bytes32))":{"params":{"_claimableInvite":"ClaimableInvite struct to hash."},"returns":{"_0":"EIP-712 compatible digest."}},"getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)":{"params":{"_chainid":"Chain ID to use in the EIP712 domain.","_claimableInvite":"ClaimableInvite struct to hash.","_name":"Contract name to use in the EIP712 domain.","_verifyingContract":"Address to use in the EIP712 domain.","_version":"Contract version to use in the EIP712 domain."},"returns":{"_0":"EIP-712 compatible digest."}}}},"ast":{"absolutePath":"test/mocks/OptimistInviterHelper.sol","id":173614,"exportedSymbols":{"ECDSA":[52322],"OptimistInviter":[98029],"OptimistInviterHelper":[173613]},"nodeType":"SourceUnit","src":"32:4214:298","nodes":[{"id":173439,"nodeType":"PragmaDirective","src":"32:23:298","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":173441,"nodeType":"ImportDirective","src":"57:75:298","nodes":[],"absolutePath":"src/periphery/op-nft/OptimistInviter.sol","file":"src/periphery/op-nft/OptimistInviter.sol","nameLocation":"-1:-1:-1","scope":173614,"sourceUnit":98030,"symbolAliases":[{"foreign":{"id":173440,"name":"OptimistInviter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98029,"src":"66:15:298","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":173443,"nodeType":"ImportDirective","src":"133:77:298","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","nameLocation":"-1:-1:-1","scope":173614,"sourceUnit":52323,"symbolAliases":[{"foreign":{"id":173442,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52322,"src":"142:5:298","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":173613,"nodeType":"ContractDefinition","src":"437:3808:298","nodes":[{"id":173450,"nodeType":"VariableDeclaration","src":"536:110:298","nodes":[],"constant":true,"documentation":{"id":173445,"nodeType":"StructuredDocumentation","src":"474:57:298","text":"@notice EIP712 typehash for the ClaimableInvite type."},"functionSelector":"c4fc453d","mutability":"constant","name":"CLAIMABLE_INVITE_TYPEHASH","nameLocation":"560:25:298","scope":173613,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":173446,"name":"bytes32","nodeType":"ElementaryTypeName","src":"536:7:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"436c61696d61626c65496e766974652861646472657373206973737565722c62797465733332206e6f6e636529","id":173448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"598:47:298","typeDescriptions":{"typeIdentifier":"t_stringliteral_6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce","typeString":"literal_string \"ClaimableInvite(address issuer,bytes32 nonce)\""},"value":"ClaimableInvite(address issuer,bytes32 nonce)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce","typeString":"literal_string \"ClaimableInvite(address issuer,bytes32 nonce)\""}],"id":173447,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"588:9:298","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":173449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"588:58:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"id":173456,"nodeType":"VariableDeclaration","src":"754:152:298","nodes":[],"constant":true,"documentation":{"id":173451,"nodeType":"StructuredDocumentation","src":"653:96:298","text":"@notice EIP712 typehash for the EIP712Domain type that is included as part of the signature."},"functionSelector":"c7977be7","mutability":"constant","name":"EIP712_DOMAIN_TYPEHASH","nameLocation":"778:22:298","scope":173613,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":173452,"name":"bytes32","nodeType":"ElementaryTypeName","src":"754:7:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":173454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"821:84:298","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":173453,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"811:9:298","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":173455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"811:95:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"id":173460,"nodeType":"VariableDeclaration","src":"981:38:298","nodes":[],"constant":false,"documentation":{"id":173457,"nodeType":"StructuredDocumentation","src":"913:63:298","text":"@notice Address of OptimistInviter contract we are testing."},"functionSelector":"d1829907","mutability":"mutable","name":"optimistInviter","nameLocation":"1004:15:298","scope":173613,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_OptimistInviter_$98029","typeString":"contract OptimistInviter"},"typeName":{"id":173459,"nodeType":"UserDefinedTypeName","pathNode":{"id":173458,"name":"OptimistInviter","nodeType":"IdentifierPath","referencedDeclaration":98029,"src":"981:15:298"},"referencedDeclaration":98029,"src":"981:15:298","typeDescriptions":{"typeIdentifier":"t_contract$_OptimistInviter_$98029","typeString":"contract OptimistInviter"}},"visibility":"public"},{"id":173463,"nodeType":"VariableDeclaration","src":"1111:18:298","nodes":[],"constant":false,"documentation":{"id":173461,"nodeType":"StructuredDocumentation","src":"1026:80:298","text":"@notice OptimistInviter contract name. Used to construct the EIP-712 domain."},"functionSelector":"06fdde03","mutability":"mutable","name":"name","nameLocation":"1125:4:298","scope":173613,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":173462,"name":"string","nodeType":"ElementaryTypeName","src":"1111:6:298","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"id":173466,"nodeType":"VariableDeclaration","src":"1221:27:298","nodes":[],"constant":false,"documentation":{"id":173464,"nodeType":"StructuredDocumentation","src":"1136:80:298","text":"@notice Keeps track of current nonce to generate new nonces for each invite."},"functionSelector":"adb610a3","mutability":"mutable","name":"currentNonce","nameLocation":"1236:12:298","scope":173613,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":173465,"name":"uint256","nodeType":"ElementaryTypeName","src":"1221:7:298","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"id":173483,"nodeType":"FunctionDefinition","src":"1255:140:298","nodes":[],"body":{"id":173482,"nodeType":"Block","src":"1322:73:298","nodes":[],"statements":[{"expression":{"id":173476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":173474,"name":"optimistInviter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173460,"src":"1332:15:298","typeDescriptions":{"typeIdentifier":"t_contract$_OptimistInviter_$98029","typeString":"contract OptimistInviter"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":173475,"name":"_optimistInviter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173469,"src":"1350:16:298","typeDescriptions":{"typeIdentifier":"t_contract$_OptimistInviter_$98029","typeString":"contract OptimistInviter"}},"src":"1332:34:298","typeDescriptions":{"typeIdentifier":"t_contract$_OptimistInviter_$98029","typeString":"contract OptimistInviter"}},"id":173477,"nodeType":"ExpressionStatement","src":"1332:34:298"},{"expression":{"id":173480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":173478,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173463,"src":"1376:4:298","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":173479,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173471,"src":"1383:5:298","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1376:12:298","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":173481,"nodeType":"ExpressionStatement","src":"1376:12:298"}]},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":173472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173469,"mutability":"mutable","name":"_optimistInviter","nameLocation":"1283:16:298","nodeType":"VariableDeclaration","scope":173483,"src":"1267:32:298","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_OptimistInviter_$98029","typeString":"contract OptimistInviter"},"typeName":{"id":173468,"nodeType":"UserDefinedTypeName","pathNode":{"id":173467,"name":"OptimistInviter","nodeType":"IdentifierPath","referencedDeclaration":98029,"src":"1267:15:298"},"referencedDeclaration":98029,"src":"1267:15:298","typeDescriptions":{"typeIdentifier":"t_contract$_OptimistInviter_$98029","typeString":"contract OptimistInviter"}},"visibility":"internal"},{"constant":false,"id":173471,"mutability":"mutable","name":"_name","nameLocation":"1315:5:298","nodeType":"VariableDeclaration","scope":173483,"src":"1301:19:298","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":173470,"name":"string","nodeType":"ElementaryTypeName","src":"1301:6:298","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1266:55:298"},"returnParameters":{"id":173473,"nodeType":"ParameterList","parameters":[],"src":"1322:0:298"},"scope":173613,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":173504,"nodeType":"FunctionDefinition","src":"1572:274:298","nodes":[],"body":{"id":173503,"nodeType":"Block","src":"1725:121:298","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":173495,"name":"CLAIMABLE_INVITE_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173450,"src":"1763:25:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":173496,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173487,"src":"1790:16:298","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_memory_ptr","typeString":"struct OptimistInviter.ClaimableInvite memory"}},"id":173497,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"issuer","nodeType":"MemberAccess","referencedDeclaration":97745,"src":"1790:23:298","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":173498,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173487,"src":"1815:16:298","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_memory_ptr","typeString":"struct OptimistInviter.ClaimableInvite memory"}},"id":173499,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":97747,"src":"1815:22:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":173493,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1752:3:298","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":173494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"1752:10:298","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":173500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1752:86:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":173492,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1742:9:298","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":173501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1742:97:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":173491,"id":173502,"nodeType":"Return","src":"1735:104:298"}]},"documentation":{"id":173484,"nodeType":"StructuredDocumentation","src":"1401:166:298","text":"@notice Returns the hash of the struct ClaimableInvite.\n @param _claimableInvite ClaimableInvite struct to hash.\n @return EIP-712 typed struct hash."},"functionSelector":"eb1df626","implemented":true,"kind":"function","modifiers":[],"name":"getClaimableInviteStructHash","nameLocation":"1581:28:298","parameters":{"id":173488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173487,"mutability":"mutable","name":"_claimableInvite","nameLocation":"1649:16:298","nodeType":"VariableDeclaration","scope":173504,"src":"1610:55:298","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_memory_ptr","typeString":"struct OptimistInviter.ClaimableInvite"},"typeName":{"id":173486,"nodeType":"UserDefinedTypeName","pathNode":{"id":173485,"name":"OptimistInviter.ClaimableInvite","nodeType":"IdentifierPath","referencedDeclaration":97748,"src":"1610:31:298"},"referencedDeclaration":97748,"src":"1610:31:298","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_storage_ptr","typeString":"struct OptimistInviter.ClaimableInvite"}},"visibility":"internal"}],"src":"1609:57:298"},"returnParameters":{"id":173491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173490,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":173504,"src":"1712:7:298","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":173489,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1712:7:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1711:9:298"},"scope":173613,"stateMutability":"pure","virtual":false,"visibility":"public"},{"id":173522,"nodeType":"FunctionDefinition","src":"2060:119:298","nodes":[],"body":{"id":173521,"nodeType":"Block","src":"2109:70:298","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":173516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2155:14:298","subExpression":{"id":173515,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173466,"src":"2155:12:298","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":173513,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2144:3:298","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":173514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"2144:10:298","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":173517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2144:26:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":173512,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2134:9:298","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":173518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2134:37:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":173511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2126:7:298","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":173510,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2126:7:298","typeDescriptions":{}}},"id":173519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2126:46:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":173509,"id":173520,"nodeType":"Return","src":"2119:53:298"}]},"documentation":{"id":173505,"nodeType":"StructuredDocumentation","src":"1852:203:298","text":"@notice Returns a bytes32 nonce that should change everytime. In practice, people should use\n         pseudorandom nonces.\n @return Nonce that should be used as part of ClaimableInvite."},"functionSelector":"34b15118","implemented":true,"kind":"function","modifiers":[],"name":"consumeNonce","nameLocation":"2069:12:298","parameters":{"id":173506,"nodeType":"ParameterList","parameters":[],"src":"2081:2:298"},"returnParameters":{"id":173509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":173522,"src":"2100:7:298","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":173507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2100:7:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2099:9:298"},"scope":173613,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":173539,"nodeType":"FunctionDefinition","src":"2388:193:298","nodes":[],"body":{"id":173538,"nodeType":"Block","src":"2501:80:298","nodes":[],"statements":[{"expression":{"arguments":[{"id":173533,"name":"_issuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173525,"src":"2550:7:298","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":173534,"name":"consumeNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173522,"src":"2559:12:298","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_bytes32_$","typeString":"function () returns (bytes32)"}},"id":173535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2559:14:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":173531,"name":"OptimistInviter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98029,"src":"2518:15:298","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OptimistInviter_$98029_$","typeString":"type(contract OptimistInviter)"}},"id":173532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ClaimableInvite","nodeType":"MemberAccess","referencedDeclaration":97748,"src":"2518:31:298","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ClaimableInvite_$97748_storage_ptr_$","typeString":"type(struct OptimistInviter.ClaimableInvite storage pointer)"}},"id":173536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2518:56:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_memory_ptr","typeString":"struct OptimistInviter.ClaimableInvite memory"}},"functionReturnParameters":173530,"id":173537,"nodeType":"Return","src":"2511:63:298"}]},"documentation":{"id":173523,"nodeType":"StructuredDocumentation","src":"2185:198:298","text":"@notice Returns a ClaimableInvite with the issuer and current nonce.\n @param _issuer Issuer to include in the ClaimableInvite.\n @return ClaimableInvite that can be hashed & signed."},"functionSelector":"8ebe24e5","implemented":true,"kind":"function","modifiers":[],"name":"getClaimableInviteWithNewNonce","nameLocation":"2397:30:298","parameters":{"id":173526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173525,"mutability":"mutable","name":"_issuer","nameLocation":"2436:7:298","nodeType":"VariableDeclaration","scope":173539,"src":"2428:15:298","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":173524,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:298","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:17:298"},"returnParameters":{"id":173530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":173539,"src":"2461:38:298","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_memory_ptr","typeString":"struct OptimistInviter.ClaimableInvite"},"typeName":{"id":173528,"nodeType":"UserDefinedTypeName","pathNode":{"id":173527,"name":"OptimistInviter.ClaimableInvite","nodeType":"IdentifierPath","referencedDeclaration":97748,"src":"2461:31:298"},"referencedDeclaration":97748,"src":"2461:31:298","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_storage_ptr","typeString":"struct OptimistInviter.ClaimableInvite"}},"visibility":"internal"}],"src":"2460:40:298"},"scope":173613,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":173569,"nodeType":"FunctionDefinition","src":"2770:340:298","nodes":[],"body":{"id":173568,"nodeType":"Block","src":"2878:232:298","nodes":[],"statements":[{"expression":{"arguments":[{"id":173549,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173543,"src":"2934:16:298","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},{"arguments":[{"id":173552,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173463,"src":"2970:4:298","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":173551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2964:5:298","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":173550,"name":"bytes","nodeType":"ElementaryTypeName","src":"2964:5:298","typeDescriptions":{}}},"id":173553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2964:11:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":173556,"name":"optimistInviter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173460,"src":"2995:15:298","typeDescriptions":{"typeIdentifier":"t_contract$_OptimistInviter_$98029","typeString":"contract OptimistInviter"}},"id":173557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"EIP712_VERSION","nodeType":"MemberAccess","referencedDeclaration":97719,"src":"2995:30:298","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":173558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2995:32:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":173555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2989:5:298","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":173554,"name":"bytes","nodeType":"ElementaryTypeName","src":"2989:5:298","typeDescriptions":{}}},"id":173559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2989:39:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":173560,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3042:5:298","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":173561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"chainid","nodeType":"MemberAccess","src":"3042:13:298","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":173564,"name":"optimistInviter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173460,"src":"3077:15:298","typeDescriptions":{"typeIdentifier":"t_contract$_OptimistInviter_$98029","typeString":"contract OptimistInviter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OptimistInviter_$98029","typeString":"contract OptimistInviter"}],"id":173563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3069:7:298","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":173562,"name":"address","nodeType":"ElementaryTypeName","src":"3069:7:298","typeDescriptions":{}}},"id":173565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3069:24:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"},{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":173548,"name":"getDigestWithEIP712Domain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173612,"src":"2895:25:298","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_ClaimableInvite_$97748_calldata_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_uint256_$_t_address_$returns$_t_bytes32_$","typeString":"function (struct OptimistInviter.ClaimableInvite calldata,bytes memory,bytes memory,uint256,address) pure returns (bytes32)"}},"id":173566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2895:208:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":173547,"id":173567,"nodeType":"Return","src":"2888:215:298"}]},"documentation":{"id":173540,"nodeType":"StructuredDocumentation","src":"2587:178:298","text":"@notice Computes the EIP712 digest with default correct parameters.\n @param _claimableInvite ClaimableInvite struct to hash.\n @return EIP-712 compatible digest."},"functionSelector":"1c6e7f25","implemented":true,"kind":"function","modifiers":[],"name":"getDigest","nameLocation":"2779:9:298","parameters":{"id":173544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173543,"mutability":"mutable","name":"_claimableInvite","nameLocation":"2830:16:298","nodeType":"VariableDeclaration","scope":173569,"src":"2789:57:298","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite"},"typeName":{"id":173542,"nodeType":"UserDefinedTypeName","pathNode":{"id":173541,"name":"OptimistInviter.ClaimableInvite","nodeType":"IdentifierPath","referencedDeclaration":97748,"src":"2789:31:298"},"referencedDeclaration":97748,"src":"2789:31:298","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_storage_ptr","typeString":"struct OptimistInviter.ClaimableInvite"}},"visibility":"internal"}],"src":"2788:59:298"},"returnParameters":{"id":173547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":173569,"src":"2869:7:298","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":173545,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2869:7:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2868:9:298"},"scope":173613,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":173612,"nodeType":"FunctionDefinition","src":"3674:569:298","nodes":[],"body":{"id":173611,"nodeType":"Block","src":"3961:282:298","nodes":[],"statements":[{"assignments":[173587],"declarations":[{"constant":false,"id":173587,"mutability":"mutable","name":"domainSeparator","nameLocation":"3979:15:298","nodeType":"VariableDeclaration","scope":173611,"src":"3971:23:298","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":173586,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3971:7:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":173602,"initialValue":{"arguments":[{"arguments":[{"id":173591,"name":"EIP712_DOMAIN_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173456,"src":"4031:22:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":173593,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173575,"src":"4065:5:298","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":173592,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4055:9:298","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":173594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4055:16:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":173596,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173577,"src":"4083:8:298","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":173595,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4073:9:298","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":173597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4073:19:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":173598,"name":"_chainid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173579,"src":"4094:8:298","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":173599,"name":"_verifyingContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173581,"src":"4104:18:298","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":173589,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4020:3:298","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":173590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"4020:10:298","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":173600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4020:103:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":173588,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3997:9:298","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":173601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3997:136:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3971:162:298"},{"expression":{"arguments":[{"id":173605,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173587,"src":"4172:15:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":173607,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173573,"src":"4218:16:298","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}],"id":173606,"name":"getClaimableInviteStructHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173504,"src":"4189:28:298","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_ClaimableInvite_$97748_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct OptimistInviter.ClaimableInvite memory) pure returns (bytes32)"}},"id":173608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4189:46:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":173603,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52322,"src":"4150:5:298","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$52322_$","typeString":"type(library ECDSA)"}},"id":173604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":52321,"src":"4150:21:298","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":173609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4150:86:298","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":173585,"id":173610,"nodeType":"Return","src":"4143:93:298"}]},"documentation":{"id":173570,"nodeType":"StructuredDocumentation","src":"3116:553:298","text":"@notice Computes the EIP712 digest with the given domain parameters.\n         Used for testing that different domain parameters fail.\n @param _claimableInvite   ClaimableInvite struct to hash.\n @param _name              Contract name to use in the EIP712 domain.\n @param _version           Contract version to use in the EIP712 domain.\n @param _chainid           Chain ID to use in the EIP712 domain.\n @param _verifyingContract Address to use in the EIP712 domain.\n @return EIP-712 compatible digest."},"functionSelector":"019a4f49","implemented":true,"kind":"function","modifiers":[],"name":"getDigestWithEIP712Domain","nameLocation":"3683:25:298","parameters":{"id":173582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173573,"mutability":"mutable","name":"_claimableInvite","nameLocation":"3759:16:298","nodeType":"VariableDeclaration","scope":173612,"src":"3718:57:298","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite"},"typeName":{"id":173572,"nodeType":"UserDefinedTypeName","pathNode":{"id":173571,"name":"OptimistInviter.ClaimableInvite","nodeType":"IdentifierPath","referencedDeclaration":97748,"src":"3718:31:298"},"referencedDeclaration":97748,"src":"3718:31:298","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$97748_storage_ptr","typeString":"struct OptimistInviter.ClaimableInvite"}},"visibility":"internal"},{"constant":false,"id":173575,"mutability":"mutable","name":"_name","nameLocation":"3798:5:298","nodeType":"VariableDeclaration","scope":173612,"src":"3785:18:298","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":173574,"name":"bytes","nodeType":"ElementaryTypeName","src":"3785:5:298","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":173577,"mutability":"mutable","name":"_version","nameLocation":"3826:8:298","nodeType":"VariableDeclaration","scope":173612,"src":"3813:21:298","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":173576,"name":"bytes","nodeType":"ElementaryTypeName","src":"3813:5:298","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":173579,"mutability":"mutable","name":"_chainid","nameLocation":"3852:8:298","nodeType":"VariableDeclaration","scope":173612,"src":"3844:16:298","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":173578,"name":"uint256","nodeType":"ElementaryTypeName","src":"3844:7:298","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":173581,"mutability":"mutable","name":"_verifyingContract","nameLocation":"3878:18:298","nodeType":"VariableDeclaration","scope":173612,"src":"3870:26:298","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":173580,"name":"address","nodeType":"ElementaryTypeName","src":"3870:7:298","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3708:194:298"},"returnParameters":{"id":173585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173584,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":173612,"src":"3948:7:298","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":173583,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3948:7:298","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3947:9:298"},"scope":173613,"stateMutability":"pure","virtual":false,"visibility":"public"}],"abstract":false,"baseContracts":[],"canonicalName":"OptimistInviterHelper","contractDependencies":[],"contractKind":"contract","documentation":{"id":173444,"nodeType":"StructuredDocumentation","src":"212:225:298","text":"@notice Simple helper contract that helps with testing flow and signature for\n         OptimistInviter contract. Made this a separate contract instead of including\n         in OptimistInviter.t.sol for reusability."},"fullyImplemented":true,"linearizedBaseContracts":[173613],"name":"OptimistInviterHelper","nameLocation":"446:21:298","scope":173614,"usedErrors":[]}],"license":"MIT"},"id":298}
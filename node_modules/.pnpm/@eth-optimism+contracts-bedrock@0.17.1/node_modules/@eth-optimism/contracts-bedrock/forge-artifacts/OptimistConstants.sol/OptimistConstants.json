{"abi":[],"bytecode":{"object":"0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080f000a","sourceMap":"185:246:206:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;185:246:206;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080f000a","sourceMap":"185:246:206:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"OptimistConstants\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for storing Optimist related constants that are shared in multiple contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/periphery/op-nft/libraries/OptimistConstants.sol\":\"OptimistConstants\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@lib-keccak/=lib/lib-keccak/contracts/lib/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":@solady-test/=lib/lib-keccak/lib/solady/test/\",\":@solady/=lib/lib-keccak/lib/solady/src/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/\",\":lib-keccak/=lib/lib-keccak/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solady/=lib/solady/src/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/periphery/op-nft/libraries/OptimistConstants.sol\":{\"keccak256\":\"0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268\",\"dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.15+commit.e14f2714"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@cwia/=lib/clones-with-immutable-args/src/","@lib-keccak/=lib/lib-keccak/contracts/lib/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","@solady-test/=lib/lib-keccak/lib/solady/test/","@solady/=lib/lib-keccak/lib/solady/src/","clones-with-immutable-args/=lib/clones-with-immutable-args/src/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/","lib-keccak/=lib/lib-keccak/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/contracts/","solady/=lib/solady/src/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/periphery/op-nft/libraries/OptimistConstants.sol":"OptimistConstants"},"evmVersion":"london","libraries":{}},"sources":{"src/periphery/op-nft/libraries/OptimistConstants.sol":{"keccak256":"0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c","urls":["bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268","dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"userdoc":{"version":1,"kind":"user","notice":"Library for storing Optimist related constants that are shared in multiple contracts."},"devdoc":{"version":1,"kind":"dev","title":"OptimistConstants"},"ast":{"absolutePath":"src/periphery/op-nft/libraries/OptimistConstants.sol","id":98041,"exportedSymbols":{"OptimistConstants":[98040]},"nodeType":"SourceUnit","src":"32:400:206","nodes":[{"id":98031,"nodeType":"PragmaDirective","src":"32:23:206","nodes":[],"literals":["solidity","0.8",".15"]},{"id":98040,"nodeType":"ContractDefinition","src":"185:246:206","nodes":[{"id":98039,"nodeType":"VariableDeclaration","src":"314:114:206","nodes":[],"constant":true,"documentation":{"id":98033,"nodeType":"StructuredDocumentation","src":"217:92:206","text":"@notice Attestation key issued by OptimistInviter allowing the attested account to mint."},"mutability":"constant","name":"OPTIMIST_CAN_MINT_FROM_INVITE_ATTESTATION_KEY","nameLocation":"340:45:206","scope":98040,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":98034,"name":"bytes32","nodeType":"ElementaryTypeName","src":"314:7:206","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e76697465","id":98037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"396:31:206","typeDescriptions":{"typeIdentifier":"t_stringliteral_e36ca07f085876c3aafb3210ed63e326268e1e0da5f31df60d5b064c132175b4","typeString":"literal_string \"optimist.can-mint-from-invite\""},"value":"optimist.can-mint-from-invite"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e36ca07f085876c3aafb3210ed63e326268e1e0da5f31df60d5b064c132175b4","typeString":"literal_string \"optimist.can-mint-from-invite\""}],"id":98036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"388:7:206","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":98035,"name":"bytes32","nodeType":"ElementaryTypeName","src":"388:7:206","typeDescriptions":{}}},"id":98038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"388:40:206","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"OptimistConstants","contractDependencies":[],"contractKind":"library","documentation":{"id":98032,"nodeType":"StructuredDocumentation","src":"57:128:206","text":"@title  OptimistConstants\n @notice Library for storing Optimist related constants that are shared in multiple contracts."},"fullyImplemented":true,"linearizedBaseContracts":[98040],"name":"OptimistConstants","nameLocation":"193:17:206","scope":98041,"usedErrors":[]}],"license":"MIT"},"id":206}
{"abi":[],"bytecode":{"object":"0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080f000a","sourceMap":"311:1885:190:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;311:1885:190;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080f000a","sourceMap":"311:1885:190:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"SecureMerkleTrie\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"SecureMerkleTrie is a thin wrapper around the MerkleTrie library that hashes the input         keys. Ethereum's state trie hashes input keys before storing them.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/trie/SecureMerkleTrie.sol\":\"SecureMerkleTrie\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@lib-keccak/=lib/lib-keccak/contracts/lib/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":@solady-test/=lib/lib-keccak/lib/solady/test/\",\":@solady/=lib/lib-keccak/lib/solady/src/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/\",\":lib-keccak/=lib/lib-keccak/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solady/=lib/solady/src/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/libraries/Bytes.sol\":{\"keccak256\":\"0x827f47d123b0fdf3b08816d5b33831811704dbf4e554e53f2269354f6bba8859\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3137ac7204d30a245a8b0d67aa6da5286f1bd8c90379daab561f84963b6db782\",\"dweb:/ipfs/QmWRhisw3axJK833gUScs23ETh2MLFbVzzqzYVMKSDN3S9\"]},\"src/libraries/rlp/RLPReader.sol\":{\"keccak256\":\"0x9ba74a3b0a11693e622380807d213d5d1250d974e18b2cd768da9cbe719a6778\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0808d721ed9e05707526ee134faa051d707a95ee6b8bd6e0b1972275da8e5723\",\"dweb:/ipfs/QmcTTPu9xgckfWdbFUAcr2RAgk3J6vzyR4FpV798TjFMeN\"]},\"src/libraries/trie/MerkleTrie.sol\":{\"keccak256\":\"0xf8ba770ee6666e73ae43184c700e9c704b2c4ace71f9e3c2227ddc11a8148b4c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4702ccee1fe44aea3ee01d59e6152eb755da083f786f00947fec4437c064fe74\",\"dweb:/ipfs/QmQjFj5J7hrEM1dxJjFszzW2Cs7g7eMhYNBXonF2DXBstE\"]},\"src/libraries/trie/SecureMerkleTrie.sol\":{\"keccak256\":\"0xeaff8315cfd21197bc6bc859c2decf5d4f4838c9c357c502cdf2b1eac863d288\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79dcdcaa560aea51d138da4f5dc553a1808b6de090b2dc1629f18375edbff681\",\"dweb:/ipfs/QmbE4pUPhf5fLKW4W6cEjhQs55gEDvHmbmoBqkW1yz3bnw\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.15+commit.e14f2714"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@cwia/=lib/clones-with-immutable-args/src/","@lib-keccak/=lib/lib-keccak/contracts/lib/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","@solady-test/=lib/lib-keccak/lib/solady/test/","@solady/=lib/lib-keccak/lib/solady/src/","clones-with-immutable-args/=lib/clones-with-immutable-args/src/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/","lib-keccak/=lib/lib-keccak/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/contracts/","solady/=lib/solady/src/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/libraries/trie/SecureMerkleTrie.sol":"SecureMerkleTrie"},"evmVersion":"london","libraries":{}},"sources":{"src/libraries/Bytes.sol":{"keccak256":"0x827f47d123b0fdf3b08816d5b33831811704dbf4e554e53f2269354f6bba8859","urls":["bzz-raw://3137ac7204d30a245a8b0d67aa6da5286f1bd8c90379daab561f84963b6db782","dweb:/ipfs/QmWRhisw3axJK833gUScs23ETh2MLFbVzzqzYVMKSDN3S9"],"license":"MIT"},"src/libraries/rlp/RLPReader.sol":{"keccak256":"0x9ba74a3b0a11693e622380807d213d5d1250d974e18b2cd768da9cbe719a6778","urls":["bzz-raw://0808d721ed9e05707526ee134faa051d707a95ee6b8bd6e0b1972275da8e5723","dweb:/ipfs/QmcTTPu9xgckfWdbFUAcr2RAgk3J6vzyR4FpV798TjFMeN"],"license":"MIT"},"src/libraries/trie/MerkleTrie.sol":{"keccak256":"0xf8ba770ee6666e73ae43184c700e9c704b2c4ace71f9e3c2227ddc11a8148b4c","urls":["bzz-raw://4702ccee1fe44aea3ee01d59e6152eb755da083f786f00947fec4437c064fe74","dweb:/ipfs/QmQjFj5J7hrEM1dxJjFszzW2Cs7g7eMhYNBXonF2DXBstE"],"license":"MIT"},"src/libraries/trie/SecureMerkleTrie.sol":{"keccak256":"0xeaff8315cfd21197bc6bc859c2decf5d4f4838c9c357c502cdf2b1eac863d288","urls":["bzz-raw://79dcdcaa560aea51d138da4f5dc553a1808b6de090b2dc1629f18375edbff681","dweb:/ipfs/QmbE4pUPhf5fLKW4W6cEjhQs55gEDvHmbmoBqkW1yz3bnw"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"userdoc":{"version":1,"kind":"user","notice":"SecureMerkleTrie is a thin wrapper around the MerkleTrie library that hashes the input         keys. Ethereum's state trie hashes input keys before storing them."},"devdoc":{"version":1,"kind":"dev","title":"SecureMerkleTrie"},"ast":{"absolutePath":"src/libraries/trie/SecureMerkleTrie.sol","id":95766,"exportedSymbols":{"MerkleTrie":[95680],"SecureMerkleTrie":[95765]},"nodeType":"SourceUnit","src":"32:2165:190","nodes":[{"id":95682,"nodeType":"PragmaDirective","src":"32:23:190","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":95684,"nodeType":"ImportDirective","src":"57:46:190","nodes":[],"absolutePath":"src/libraries/trie/MerkleTrie.sol","file":"./MerkleTrie.sol","nameLocation":"-1:-1:-1","scope":95766,"sourceUnit":95681,"symbolAliases":[{"foreign":{"id":95683,"name":"MerkleTrie","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95680,"src":"66:10:190","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":95765,"nodeType":"ContractDefinition","src":"311:1885:190","nodes":[{"id":95717,"nodeType":"FunctionDefinition","src":"1041:343:190","nodes":[],"body":{"id":95716,"nodeType":"Block","src":"1251:133:190","nodes":[],"statements":[{"assignments":[95701],"declarations":[{"constant":false,"id":95701,"mutability":"mutable","name":"key","nameLocation":"1274:3:190","nodeType":"VariableDeclaration","scope":95716,"src":"1261:16:190","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95700,"name":"bytes","nodeType":"ElementaryTypeName","src":"1261:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":95705,"initialValue":{"arguments":[{"id":95703,"name":"_key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95688,"src":"1294:4:190","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":95702,"name":"_getSecureKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95764,"src":"1280:13:190","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bytes memory)"}},"id":95704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1280:19:190","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1261:38:190"},{"expression":{"id":95714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":95706,"name":"valid_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95698,"src":"1309:6:190","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":95709,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95701,"src":"1350:3:190","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":95710,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95690,"src":"1355:6:190","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":95711,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95693,"src":"1363:6:190","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"id":95712,"name":"_root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95695,"src":"1371:5:190","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":95707,"name":"MerkleTrie","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95680,"src":"1318:10:190","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleTrie_$95680_$","typeString":"type(library MerkleTrie)"}},"id":95708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"verifyInclusionProof","nodeType":"MemberAccess","referencedDeclaration":95185,"src":"1318:31:190","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes memory,bytes memory,bytes memory[] memory,bytes32) pure returns (bool)"}},"id":95713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1318:59:190","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1309:68:190","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":95715,"nodeType":"ExpressionStatement","src":"1309:68:190"}]},"documentation":{"id":95686,"nodeType":"StructuredDocumentation","src":"342:694:190","text":"@notice Verifies a proof that a given key/value pair is present in the Merkle trie.\n @param _key   Key of the node to search for, as a hex string.\n @param _value Value of the node to search for, as a hex string.\n @param _proof Merkle trie inclusion proof for the desired node. Unlike traditional Merkle\n               trees, this proof is executed top-down and consists of a list of RLP-encoded\n               nodes that make a path down to the target node.\n @param _root  Known root of the Merkle trie. Used to verify that the included proof is\n               correctly constructed.\n @return valid_ Whether or not the proof is valid."},"implemented":true,"kind":"function","modifiers":[],"name":"verifyInclusionProof","nameLocation":"1050:20:190","parameters":{"id":95696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95688,"mutability":"mutable","name":"_key","nameLocation":"1093:4:190","nodeType":"VariableDeclaration","scope":95717,"src":"1080:17:190","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95687,"name":"bytes","nodeType":"ElementaryTypeName","src":"1080:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":95690,"mutability":"mutable","name":"_value","nameLocation":"1120:6:190","nodeType":"VariableDeclaration","scope":95717,"src":"1107:19:190","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95689,"name":"bytes","nodeType":"ElementaryTypeName","src":"1107:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":95693,"mutability":"mutable","name":"_proof","nameLocation":"1151:6:190","nodeType":"VariableDeclaration","scope":95717,"src":"1136:21:190","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":95691,"name":"bytes","nodeType":"ElementaryTypeName","src":"1136:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":95692,"nodeType":"ArrayTypeName","src":"1136:7:190","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":95695,"mutability":"mutable","name":"_root","nameLocation":"1175:5:190","nodeType":"VariableDeclaration","scope":95717,"src":"1167:13:190","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":95694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1167:7:190","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1070:116:190"},"returnParameters":{"id":95699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95698,"mutability":"mutable","name":"valid_","nameLocation":"1239:6:190","nodeType":"VariableDeclaration","scope":95717,"src":"1234:11:190","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":95697,"name":"bool","nodeType":"ElementaryTypeName","src":"1234:4:190","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1233:13:190"},"scope":95765,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":95746,"nodeType":"FunctionDefinition","src":"1680:222:190","nodes":[],"body":{"id":95745,"nodeType":"Block","src":"1794:108:190","nodes":[],"statements":[{"assignments":[95731],"declarations":[{"constant":false,"id":95731,"mutability":"mutable","name":"key","nameLocation":"1817:3:190","nodeType":"VariableDeclaration","scope":95745,"src":"1804:16:190","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95730,"name":"bytes","nodeType":"ElementaryTypeName","src":"1804:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":95735,"initialValue":{"arguments":[{"id":95733,"name":"_key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95720,"src":"1837:4:190","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":95732,"name":"_getSecureKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95764,"src":"1823:13:190","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bytes memory)"}},"id":95734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1823:19:190","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1804:38:190"},{"expression":{"id":95743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":95736,"name":"value_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95728,"src":"1852:6:190","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":95739,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95731,"src":"1876:3:190","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":95740,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95723,"src":"1881:6:190","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"id":95741,"name":"_root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95725,"src":"1889:5:190","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":95737,"name":"MerkleTrie","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95680,"src":"1861:10:190","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleTrie_$95680_$","typeString":"type(library MerkleTrie)"}},"id":95738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"get","nodeType":"MemberAccess","referencedDeclaration":95533,"src":"1861:14:190","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,bytes memory[] memory,bytes32) pure returns (bytes memory)"}},"id":95742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1861:34:190","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1852:43:190","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":95744,"nodeType":"ExpressionStatement","src":"1852:43:190"}]},"documentation":{"id":95718,"nodeType":"StructuredDocumentation","src":"1390:285:190","text":"@notice Retrieves the value associated with a given key.\n @param _key   Key to search for, as hex bytes.\n @param _proof Merkle trie inclusion proof for the key.\n @param _root  Known root of the Merkle trie.\n @return value_ Value of the key if it exists."},"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"1689:3:190","parameters":{"id":95726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95720,"mutability":"mutable","name":"_key","nameLocation":"1706:4:190","nodeType":"VariableDeclaration","scope":95746,"src":"1693:17:190","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95719,"name":"bytes","nodeType":"ElementaryTypeName","src":"1693:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":95723,"mutability":"mutable","name":"_proof","nameLocation":"1727:6:190","nodeType":"VariableDeclaration","scope":95746,"src":"1712:21:190","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":95721,"name":"bytes","nodeType":"ElementaryTypeName","src":"1712:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":95722,"nodeType":"ArrayTypeName","src":"1712:7:190","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":95725,"mutability":"mutable","name":"_root","nameLocation":"1743:5:190","nodeType":"VariableDeclaration","scope":95746,"src":"1735:13:190","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":95724,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1735:7:190","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1692:57:190"},"returnParameters":{"id":95729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95728,"mutability":"mutable","name":"value_","nameLocation":"1786:6:190","nodeType":"VariableDeclaration","scope":95746,"src":"1773:19:190","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95727,"name":"bytes","nodeType":"ElementaryTypeName","src":"1773:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1772:21:190"},"scope":95765,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":95764,"nodeType":"FunctionDefinition","src":"2052:142:190","nodes":[],"body":{"id":95763,"nodeType":"Block","src":"2136:58:190","nodes":[],"statements":[{"expression":{"id":95761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":95754,"name":"hash_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95752,"src":"2146:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":95758,"name":"_key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95749,"src":"2181:4:190","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":95757,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2171:9:190","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":95759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2171:15:190","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":95755,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2154:3:190","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":95756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"2154:16:190","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":95760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2154:33:190","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2146:41:190","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":95762,"nodeType":"ExpressionStatement","src":"2146:41:190"}]},"documentation":{"id":95747,"nodeType":"StructuredDocumentation","src":"1908:139:190","text":"@notice Computes the hashed version of the input key.\n @param _key Key to hash.\n @return hash_ Hashed version of the key."},"implemented":true,"kind":"function","modifiers":[],"name":"_getSecureKey","nameLocation":"2061:13:190","parameters":{"id":95750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95749,"mutability":"mutable","name":"_key","nameLocation":"2088:4:190","nodeType":"VariableDeclaration","scope":95764,"src":"2075:17:190","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95748,"name":"bytes","nodeType":"ElementaryTypeName","src":"2075:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2074:19:190"},"returnParameters":{"id":95753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95752,"mutability":"mutable","name":"hash_","nameLocation":"2129:5:190","nodeType":"VariableDeclaration","scope":95764,"src":"2116:18:190","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95751,"name":"bytes","nodeType":"ElementaryTypeName","src":"2116:5:190","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2115:20:190"},"scope":95765,"stateMutability":"pure","virtual":false,"visibility":"private"}],"abstract":false,"baseContracts":[],"canonicalName":"SecureMerkleTrie","contractDependencies":[],"contractKind":"library","documentation":{"id":95685,"nodeType":"StructuredDocumentation","src":"105:206:190","text":"@title SecureMerkleTrie\n @notice SecureMerkleTrie is a thin wrapper around the MerkleTrie library that hashes the input\n         keys. Ethereum's state trie hashes input keys before storing them."},"fullyImplemented":true,"linearizedBaseContracts":[95765],"name":"SecureMerkleTrie","nameLocation":"319:16:190","scope":95766,"usedErrors":[]}],"license":"MIT"},"id":190}
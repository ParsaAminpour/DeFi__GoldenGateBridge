{"abi":[{"type":"function","name":"addLocalData","inputs":[{"name":"_ident","type":"uint256","internalType":"uint256"},{"name":"_execLeafIdx","type":"uint256","internalType":"uint256"},{"name":"_partOffset","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"attack","inputs":[{"name":"_parentIndex","type":"uint256","internalType":"uint256"},{"name":"_claim","type":"bytes32","internalType":"Claim"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"createdAt","inputs":[],"outputs":[{"name":"createdAt_","type":"uint64","internalType":"Timestamp"}],"stateMutability":"view"},{"type":"function","name":"defend","inputs":[{"name":"_parentIndex","type":"uint256","internalType":"uint256"},{"name":"_claim","type":"bytes32","internalType":"Claim"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"extraData","inputs":[],"outputs":[{"name":"extraData_","type":"bytes","internalType":"bytes"}],"stateMutability":"pure"},{"type":"function","name":"gameData","inputs":[],"outputs":[{"name":"gameType_","type":"uint32","internalType":"GameType"},{"name":"rootClaim_","type":"bytes32","internalType":"Claim"},{"name":"extraData_","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"gameType","inputs":[],"outputs":[{"name":"gameType_","type":"uint32","internalType":"GameType"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"l1Head","inputs":[],"outputs":[{"name":"l1Head_","type":"bytes32","internalType":"Hash"}],"stateMutability":"view"},{"type":"function","name":"l2BlockNumber","inputs":[],"outputs":[{"name":"l2BlockNumber_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"resolve","inputs":[],"outputs":[{"name":"status_","type":"uint8","internalType":"enum GameStatus"}],"stateMutability":"nonpayable"},{"type":"function","name":"resolveClaim","inputs":[{"name":"_claimIndex","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"resolvedAt","inputs":[],"outputs":[{"name":"resolvedAt_","type":"uint64","internalType":"Timestamp"}],"stateMutability":"view"},{"type":"function","name":"rootClaim","inputs":[],"outputs":[{"name":"rootClaim_","type":"bytes32","internalType":"Claim"}],"stateMutability":"pure"},{"type":"function","name":"status","inputs":[],"outputs":[{"name":"status_","type":"uint8","internalType":"enum GameStatus"}],"stateMutability":"view"},{"type":"function","name":"step","inputs":[{"name":"_claimIndex","type":"uint256","internalType":"uint256"},{"name":"_isAttack","type":"bool","internalType":"bool"},{"name":"_stateData","type":"bytes","internalType":"bytes"},{"name":"_proof","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Move","inputs":[{"name":"parentIndex","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"claim","type":"bytes32","indexed":true,"internalType":"Claim"},{"name":"claimant","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Resolved","inputs":[{"name":"status","type":"uint8","indexed":true,"internalType":"enum GameStatus"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addLocalData(uint256,uint256,uint256)":"f8f43ff6","attack(uint256,bytes32)":"c55cd0c7","createdAt()":"cf09e0d0","defend(uint256,bytes32)":"35fef567","extraData()":"609d3334","gameData()":"fa24f743","gameType()":"bbdc02db","initialize()":"8129fc1c","l1Head()":"6361506d","l2BlockNumber()":"8b85902b","resolve()":"2810e1d6","resolveClaim(uint256)":"fdffbb28","resolvedAt()":"19effeb4","rootClaim()":"bcef3b55","status()":"200d2ed2","step(uint256,bool,bytes,bytes)":"d8cc1a3c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"parentIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"Claim\",\"name\":\"claim\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"Move\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum GameStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Resolved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ident\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_execLeafIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partOffset\",\"type\":\"uint256\"}],\"name\":\"addLocalData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentIndex\",\"type\":\"uint256\"},{\"internalType\":\"Claim\",\"name\":\"_claim\",\"type\":\"bytes32\"}],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"Timestamp\",\"name\":\"createdAt_\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentIndex\",\"type\":\"uint256\"},{\"internalType\":\"Claim\",\"name\":\"_claim\",\"type\":\"bytes32\"}],\"name\":\"defend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameData\",\"outputs\":[{\"internalType\":\"GameType\",\"name\":\"gameType_\",\"type\":\"uint32\"},{\"internalType\":\"Claim\",\"name\":\"rootClaim_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameType\",\"outputs\":[{\"internalType\":\"GameType\",\"name\":\"gameType_\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Head\",\"outputs\":[{\"internalType\":\"Hash\",\"name\":\"l1Head_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"l2BlockNumber_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"enum GameStatus\",\"name\":\"status_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimIndex\",\"type\":\"uint256\"}],\"name\":\"resolveClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolvedAt\",\"outputs\":[{\"internalType\":\"Timestamp\",\"name\":\"resolvedAt_\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootClaim\",\"outputs\":[{\"internalType\":\"Claim\",\"name\":\"rootClaim_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum GameStatus\",\"name\":\"status_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAttack\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_stateData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"step\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Move(uint256,bytes32,address)\":{\"params\":{\"claim\":\"The claim being added\",\"claimant\":\"The address of the claimant\",\"parentIndex\":\"The index within the `claimData` array of the parent claim\"}},\"Resolved(uint8)\":{\"params\":{\"status\":\"The status of the game after resolution.\"}}},\"kind\":\"dev\",\"methods\":{\"addLocalData(uint256,uint256,uint256)\":{\"params\":{\"_execLeafIdx\":\"The index of the leaf claim in an execution subgame that requires the local data for a step.\",\"_ident\":\"The local identifier of the data to post.\",\"_partOffset\":\"The offset of the data to post.\"}},\"attack(uint256,bytes32)\":{\"params\":{\"_claim\":\"The `Claim` at the relative attack position.\",\"_parentIndex\":\"Index of the `Claim` to attack in the `claimData` array.\"}},\"createdAt()\":{\"returns\":{\"createdAt_\":\"The timestamp that the DisputeGame contract was created at.\"}},\"defend(uint256,bytes32)\":{\"params\":{\"_claim\":\"The `Claim` at the relative defense position.\",\"_parentIndex\":\"Index of the claim to defend in the `claimData` array.\"}},\"extraData()\":{\"details\":\"`clones-with-immutable-args` argument #2\",\"returns\":{\"extraData_\":\"Any extra data supplied to the dispute game contract by the creator.\"}},\"gameData()\":{\"returns\":{\"extraData_\":\"Any extra data supplied to the dispute game contract by the creator.\",\"gameType_\":\"The type of proof system being used.\",\"rootClaim_\":\"The root claim of the DisputeGame.\"}},\"gameType()\":{\"details\":\"The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.\",\"returns\":{\"gameType_\":\"The type of proof system being used.\"}},\"initialize()\":{\"details\":\"This function may only be called once.\"},\"resolve()\":{\"details\":\"May only be called if the `status` is `IN_PROGRESS`.\",\"returns\":{\"status_\":\"The status of the game after resolution.\"}},\"resolveClaim(uint256)\":{\"details\":\"This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.\",\"params\":{\"_claimIndex\":\"The index of the subgame root claim to resolve.\"}},\"resolvedAt()\":{\"returns\":{\"resolvedAt_\":\"The timestamp that the DisputeGame contract was resolved at.\"}},\"rootClaim()\":{\"details\":\"`clones-with-immutable-args` argument #1\",\"returns\":{\"rootClaim_\":\"The root claim of the DisputeGame.\"}},\"status()\":{\"returns\":{\"status_\":\"The current status of the game.\"}},\"step(uint256,bool,bytes,bytes)\":{\"details\":\"This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.\",\"params\":{\"_claimIndex\":\"The index of the challenged claim within `claimData`.\",\"_isAttack\":\"Whether or not the step is an attack or a defense.\",\"_proof\":\"Proof to access memory nodes in the VM's merkle state tree.\",\"_stateData\":\"The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.\"}}},\"title\":\"IFaultDisputeGame\",\"version\":1},\"userdoc\":{\"events\":{\"Move(uint256,bytes32,address)\":{\"notice\":\"Emitted when a new claim is added to the DAG by `claimant`\"},\"Resolved(uint8)\":{\"notice\":\"Emitted when the game is resolved.\"}},\"kind\":\"user\",\"methods\":{\"addLocalData(uint256,uint256,uint256)\":{\"notice\":\"Posts the requested local data to the VM's `PreimageOralce`.\"},\"attack(uint256,bytes32)\":{\"notice\":\"Attack a disagreed upon `Claim`.\"},\"createdAt()\":{\"notice\":\"Returns the timestamp that the DisputeGame contract was created at.\"},\"defend(uint256,bytes32)\":{\"notice\":\"Defend an agreed upon `Claim`.\"},\"extraData()\":{\"notice\":\"Getter for the extra data.\"},\"gameData()\":{\"notice\":\"A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.\"},\"gameType()\":{\"notice\":\"Getter for the game type.\"},\"initialize()\":{\"notice\":\"Initializes the contract.\"},\"l1Head()\":{\"notice\":\"A block hash on the L1 that contains the disputed output root.\"},\"l2BlockNumber()\":{\"notice\":\"The l2BlockNumber of the disputed output root in the `L2OutputOracle`.\"},\"resolve()\":{\"notice\":\"If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.\"},\"resolveClaim(uint256)\":{\"notice\":\"Resolves the subgame rooted at the given claim index.\"},\"resolvedAt()\":{\"notice\":\"Returns the timestamp that the DisputeGame contract was resolved at.\"},\"rootClaim()\":{\"notice\":\"Getter for the root claim.\"},\"status()\":{\"notice\":\"Returns the current status of the game.\"},\"step(uint256,bool,bytes,bytes)\":{\"notice\":\"Perform an instruction step via an on-chain fault proof processor.\"}},\"notice\":\"The interface for a fault proof backed dispute game.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/dispute/interfaces/IFaultDisputeGame.sol\":\"IFaultDisputeGame\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@lib-keccak/=lib/lib-keccak/contracts/lib/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":@solady-test/=lib/lib-keccak/lib/solady/test/\",\":@solady/=lib/lib-keccak/lib/solady/src/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/\",\":lib-keccak/=lib/lib-keccak/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solady/=lib/solady/src/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/dispute/interfaces/IDisputeGame.sol\":{\"keccak256\":\"0xe9f4fd0a027c3bbdc4fcaa07a41bb6e27708a3984efc43f5feb817a4be791506\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a94a8807d562cdf269fe0efee6fdd4f1c20b1e13996e0139f2c53f886bde571\",\"dweb:/ipfs/QmctLvYjq9jq3Cc7jdd7EPUKmYHwGCJ5QVbzAA38wo69aG\"]},\"src/dispute/interfaces/IFaultDisputeGame.sol\":{\"keccak256\":\"0x30f33b7764d82a5903f6569b8a2d316da10bf007a173dcebd9838af118b3dcca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77b8948bff0028693ca48f1848060cc724ea58df584efd5326c38e3d2e38aaf4\",\"dweb:/ipfs/QmPtcF1ExNYgdVmLoy3raEWQNks5FRdBvwt9y39qew6HXN\"]},\"src/dispute/interfaces/IInitializable.sol\":{\"keccak256\":\"0x30eca13613b0654e8beb1756cc952163abc9c6c92fe4b1baccd20eb73b17ca4f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4fca9e9815265c4457e9dde03476b190d300829aab42a779e2c0eb4a88eff3e7\",\"dweb:/ipfs/QmRdq93iUVtE5EGy1KxnWa8v3UjH48cgnekpg5sx33B9he\"]},\"src/dispute/lib/LibGameId.sol\":{\"keccak256\":\"0x9a9f30500da6eb7eeaa7193515dc5e45dc479f09ae7d522a07283c0fb5f4bfa6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be113d8198d5822385de3d6ff3d7b3e8241993484aa95604ffaf38c2d33f40e0\",\"dweb:/ipfs/QmY9mHC52fqc4gAFYCGobNyuP4TqugQgs8o1kTF33t17Hc\"]},\"src/dispute/lib/LibHashing.sol\":{\"keccak256\":\"0x5a072cd028094eee55acb84ed8d08d7422b1fb46658b7e043e916781530a383b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b67e54f1318f1fd67b28b16c6861a56e27217c26a12aaea5c446e2ec53143920\",\"dweb:/ipfs/QmVLSTP3PwXzRkR3A4qV9fjZhca9v8J1EnEYuVGUsSirAq\"]},\"src/dispute/lib/LibPosition.sol\":{\"keccak256\":\"0xfeb49b2421dbacc775aa27adf3b7803ebf84b47ac8f5b9fbc372bd9c45b76504\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://95dc9d09fc4dbb4a7d7ffa70cb275277635d4fd1554421a65fd2e1329fddb059\",\"dweb:/ipfs/QmVGHtM3ABWEBFETvAz6sBucirsRfuTrn2CdiUBH1nt3un\"]},\"src/dispute/lib/LibUDT.sol\":{\"keccak256\":\"0x42cd5a022686434153142b10871ff07e7ed27d32c28d5285f5d2cc6b7de1510c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06e460b40977e0668dd27fcc4dd5496e24561e5e9c64cf812e077e2d5db60ffa\",\"dweb:/ipfs/QmTrbrc7ykFhLmtEdKWq9sANRbuDMvjqthUNxtEkW3vTGg\"]},\"src/libraries/DisputeErrors.sol\":{\"keccak256\":\"0x8e8be49421a00de964e1de84ac705709ddc1edf3cd02a5acb6c29f4984a3d780\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0276278752fc662727697315467a63ee6db1c81f9fdc3c549e2bcc60447890b9\",\"dweb:/ipfs/QmWLnedbgy6Y5LAaPYYRZn8xneMjRhw63iaaR4KQz7Zmts\"]},\"src/libraries/DisputeTypes.sol\":{\"keccak256\":\"0xf42eeeae7e588f63cb5314e56549df8b2f817daf2c648497c0b947081eceb539\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4fa815d84de6e457048c7809b1a4f08c2c6983a72f8237b25158bf4aabbebe53\",\"dweb:/ipfs/QmSuG32A9jvSxjxm7WNmXQSEwLvfghcbnYyTZqMaQuDFt4\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"parentIndex","type":"uint256","indexed":true},{"internalType":"Claim","name":"claim","type":"bytes32","indexed":true},{"internalType":"address","name":"claimant","type":"address","indexed":true}],"type":"event","name":"Move","anonymous":false},{"inputs":[{"internalType":"enum GameStatus","name":"status","type":"uint8","indexed":true}],"type":"event","name":"Resolved","anonymous":false},{"inputs":[{"internalType":"uint256","name":"_ident","type":"uint256"},{"internalType":"uint256","name":"_execLeafIdx","type":"uint256"},{"internalType":"uint256","name":"_partOffset","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"addLocalData"},{"inputs":[{"internalType":"uint256","name":"_parentIndex","type":"uint256"},{"internalType":"Claim","name":"_claim","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"attack"},{"inputs":[],"stateMutability":"view","type":"function","name":"createdAt","outputs":[{"internalType":"Timestamp","name":"createdAt_","type":"uint64"}]},{"inputs":[{"internalType":"uint256","name":"_parentIndex","type":"uint256"},{"internalType":"Claim","name":"_claim","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"defend"},{"inputs":[],"stateMutability":"pure","type":"function","name":"extraData","outputs":[{"internalType":"bytes","name":"extraData_","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"gameData","outputs":[{"internalType":"GameType","name":"gameType_","type":"uint32"},{"internalType":"Claim","name":"rootClaim_","type":"bytes32"},{"internalType":"bytes","name":"extraData_","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"gameType","outputs":[{"internalType":"GameType","name":"gameType_","type":"uint32"}]},{"inputs":[],"stateMutability":"payable","type":"function","name":"initialize"},{"inputs":[],"stateMutability":"view","type":"function","name":"l1Head","outputs":[{"internalType":"Hash","name":"l1Head_","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"l2BlockNumber","outputs":[{"internalType":"uint256","name":"l2BlockNumber_","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"resolve","outputs":[{"internalType":"enum GameStatus","name":"status_","type":"uint8"}]},{"inputs":[{"internalType":"uint256","name":"_claimIndex","type":"uint256"}],"stateMutability":"payable","type":"function","name":"resolveClaim"},{"inputs":[],"stateMutability":"view","type":"function","name":"resolvedAt","outputs":[{"internalType":"Timestamp","name":"resolvedAt_","type":"uint64"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"rootClaim","outputs":[{"internalType":"Claim","name":"rootClaim_","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"status","outputs":[{"internalType":"enum GameStatus","name":"status_","type":"uint8"}]},{"inputs":[{"internalType":"uint256","name":"_claimIndex","type":"uint256"},{"internalType":"bool","name":"_isAttack","type":"bool"},{"internalType":"bytes","name":"_stateData","type":"bytes"},{"internalType":"bytes","name":"_proof","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"step"}],"devdoc":{"kind":"dev","methods":{"addLocalData(uint256,uint256,uint256)":{"params":{"_execLeafIdx":"The index of the leaf claim in an execution subgame that requires the local data for a step.","_ident":"The local identifier of the data to post.","_partOffset":"The offset of the data to post."}},"attack(uint256,bytes32)":{"params":{"_claim":"The `Claim` at the relative attack position.","_parentIndex":"Index of the `Claim` to attack in the `claimData` array."}},"createdAt()":{"returns":{"createdAt_":"The timestamp that the DisputeGame contract was created at."}},"defend(uint256,bytes32)":{"params":{"_claim":"The `Claim` at the relative defense position.","_parentIndex":"Index of the claim to defend in the `claimData` array."}},"extraData()":{"details":"`clones-with-immutable-args` argument #2","returns":{"extraData_":"Any extra data supplied to the dispute game contract by the creator."}},"gameData()":{"returns":{"extraData_":"Any extra data supplied to the dispute game contract by the creator.","gameType_":"The type of proof system being used.","rootClaim_":"The root claim of the DisputeGame."}},"gameType()":{"details":"The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.","returns":{"gameType_":"The type of proof system being used."}},"initialize()":{"details":"This function may only be called once."},"resolve()":{"details":"May only be called if the `status` is `IN_PROGRESS`.","returns":{"status_":"The status of the game after resolution."}},"resolveClaim(uint256)":{"details":"This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.","params":{"_claimIndex":"The index of the subgame root claim to resolve."}},"resolvedAt()":{"returns":{"resolvedAt_":"The timestamp that the DisputeGame contract was resolved at."}},"rootClaim()":{"details":"`clones-with-immutable-args` argument #1","returns":{"rootClaim_":"The root claim of the DisputeGame."}},"status()":{"returns":{"status_":"The current status of the game."}},"step(uint256,bool,bytes,bytes)":{"details":"This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.","params":{"_claimIndex":"The index of the challenged claim within `claimData`.","_isAttack":"Whether or not the step is an attack or a defense.","_proof":"Proof to access memory nodes in the VM's merkle state tree.","_stateData":"The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM."}}},"version":1},"userdoc":{"kind":"user","methods":{"addLocalData(uint256,uint256,uint256)":{"notice":"Posts the requested local data to the VM's `PreimageOralce`."},"attack(uint256,bytes32)":{"notice":"Attack a disagreed upon `Claim`."},"createdAt()":{"notice":"Returns the timestamp that the DisputeGame contract was created at."},"defend(uint256,bytes32)":{"notice":"Defend an agreed upon `Claim`."},"extraData()":{"notice":"Getter for the extra data."},"gameData()":{"notice":"A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation."},"gameType()":{"notice":"Getter for the game type."},"initialize()":{"notice":"Initializes the contract."},"l1Head()":{"notice":"A block hash on the L1 that contains the disputed output root."},"l2BlockNumber()":{"notice":"The l2BlockNumber of the disputed output root in the `L2OutputOracle`."},"resolve()":{"notice":"If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties."},"resolveClaim(uint256)":{"notice":"Resolves the subgame rooted at the given claim index."},"resolvedAt()":{"notice":"Returns the timestamp that the DisputeGame contract was resolved at."},"rootClaim()":{"notice":"Getter for the root claim."},"status()":{"notice":"Returns the current status of the game."},"step(uint256,bool,bytes,bytes)":{"notice":"Perform an instruction step via an on-chain fault proof processor."}},"version":1}},"settings":{"remappings":["@cwia/=lib/clones-with-immutable-args/src/","@lib-keccak/=lib/lib-keccak/contracts/lib/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","@solady-test/=lib/lib-keccak/lib/solady/test/","@solady/=lib/lib-keccak/lib/solady/src/","clones-with-immutable-args/=lib/clones-with-immutable-args/src/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/","lib-keccak/=lib/lib-keccak/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/contracts/","solady/=lib/solady/src/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/dispute/interfaces/IFaultDisputeGame.sol":"IFaultDisputeGame"},"evmVersion":"paris","libraries":{}},"sources":{"src/dispute/interfaces/IDisputeGame.sol":{"keccak256":"0xe9f4fd0a027c3bbdc4fcaa07a41bb6e27708a3984efc43f5feb817a4be791506","urls":["bzz-raw://6a94a8807d562cdf269fe0efee6fdd4f1c20b1e13996e0139f2c53f886bde571","dweb:/ipfs/QmctLvYjq9jq3Cc7jdd7EPUKmYHwGCJ5QVbzAA38wo69aG"],"license":"MIT"},"src/dispute/interfaces/IFaultDisputeGame.sol":{"keccak256":"0x30f33b7764d82a5903f6569b8a2d316da10bf007a173dcebd9838af118b3dcca","urls":["bzz-raw://77b8948bff0028693ca48f1848060cc724ea58df584efd5326c38e3d2e38aaf4","dweb:/ipfs/QmPtcF1ExNYgdVmLoy3raEWQNks5FRdBvwt9y39qew6HXN"],"license":"MIT"},"src/dispute/interfaces/IInitializable.sol":{"keccak256":"0x30eca13613b0654e8beb1756cc952163abc9c6c92fe4b1baccd20eb73b17ca4f","urls":["bzz-raw://4fca9e9815265c4457e9dde03476b190d300829aab42a779e2c0eb4a88eff3e7","dweb:/ipfs/QmRdq93iUVtE5EGy1KxnWa8v3UjH48cgnekpg5sx33B9he"],"license":"MIT"},"src/dispute/lib/LibGameId.sol":{"keccak256":"0x9a9f30500da6eb7eeaa7193515dc5e45dc479f09ae7d522a07283c0fb5f4bfa6","urls":["bzz-raw://be113d8198d5822385de3d6ff3d7b3e8241993484aa95604ffaf38c2d33f40e0","dweb:/ipfs/QmY9mHC52fqc4gAFYCGobNyuP4TqugQgs8o1kTF33t17Hc"],"license":"MIT"},"src/dispute/lib/LibHashing.sol":{"keccak256":"0x5a072cd028094eee55acb84ed8d08d7422b1fb46658b7e043e916781530a383b","urls":["bzz-raw://b67e54f1318f1fd67b28b16c6861a56e27217c26a12aaea5c446e2ec53143920","dweb:/ipfs/QmVLSTP3PwXzRkR3A4qV9fjZhca9v8J1EnEYuVGUsSirAq"],"license":"MIT"},"src/dispute/lib/LibPosition.sol":{"keccak256":"0xfeb49b2421dbacc775aa27adf3b7803ebf84b47ac8f5b9fbc372bd9c45b76504","urls":["bzz-raw://95dc9d09fc4dbb4a7d7ffa70cb275277635d4fd1554421a65fd2e1329fddb059","dweb:/ipfs/QmVGHtM3ABWEBFETvAz6sBucirsRfuTrn2CdiUBH1nt3un"],"license":"MIT"},"src/dispute/lib/LibUDT.sol":{"keccak256":"0x42cd5a022686434153142b10871ff07e7ed27d32c28d5285f5d2cc6b7de1510c","urls":["bzz-raw://06e460b40977e0668dd27fcc4dd5496e24561e5e9c64cf812e077e2d5db60ffa","dweb:/ipfs/QmTrbrc7ykFhLmtEdKWq9sANRbuDMvjqthUNxtEkW3vTGg"],"license":"MIT"},"src/libraries/DisputeErrors.sol":{"keccak256":"0x8e8be49421a00de964e1de84ac705709ddc1edf3cd02a5acb6c29f4984a3d780","urls":["bzz-raw://0276278752fc662727697315467a63ee6db1c81f9fdc3c549e2bcc60447890b9","dweb:/ipfs/QmWLnedbgy6Y5LAaPYYRZn8xneMjRhw63iaaR4KQz7Zmts"],"license":"MIT"},"src/libraries/DisputeTypes.sol":{"keccak256":"0xf42eeeae7e588f63cb5314e56549df8b2f817daf2c648497c0b947081eceb539","urls":["bzz-raw://4fa815d84de6e457048c7809b1a4f08c2c6983a72f8237b25158bf4aabbebe53","dweb:/ipfs/QmSuG32A9jvSxjxm7WNmXQSEwLvfghcbnYyTZqMaQuDFt4"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"userdoc":{"version":1,"kind":"user","methods":{"addLocalData(uint256,uint256,uint256)":{"notice":"Posts the requested local data to the VM's `PreimageOralce`."},"attack(uint256,bytes32)":{"notice":"Attack a disagreed upon `Claim`."},"createdAt()":{"notice":"Returns the timestamp that the DisputeGame contract was created at."},"defend(uint256,bytes32)":{"notice":"Defend an agreed upon `Claim`."},"extraData()":{"notice":"Getter for the extra data."},"gameData()":{"notice":"A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation."},"gameType()":{"notice":"Getter for the game type."},"initialize()":{"notice":"Initializes the contract."},"l1Head()":{"notice":"A block hash on the L1 that contains the disputed output root."},"l2BlockNumber()":{"notice":"The l2BlockNumber of the disputed output root in the `L2OutputOracle`."},"resolve()":{"notice":"If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties."},"resolveClaim(uint256)":{"notice":"Resolves the subgame rooted at the given claim index."},"resolvedAt()":{"notice":"Returns the timestamp that the DisputeGame contract was resolved at."},"rootClaim()":{"notice":"Getter for the root claim."},"status()":{"notice":"Returns the current status of the game."},"step(uint256,bool,bytes,bytes)":{"notice":"Perform an instruction step via an on-chain fault proof processor."}},"events":{"Move(uint256,bytes32,address)":{"notice":"Emitted when a new claim is added to the DAG by `claimant`"},"Resolved(uint8)":{"notice":"Emitted when the game is resolved."}},"notice":"The interface for a fault proof backed dispute game."},"devdoc":{"version":1,"kind":"dev","methods":{"addLocalData(uint256,uint256,uint256)":{"params":{"_execLeafIdx":"The index of the leaf claim in an execution subgame that requires the local data for a step.","_ident":"The local identifier of the data to post.","_partOffset":"The offset of the data to post."}},"attack(uint256,bytes32)":{"params":{"_claim":"The `Claim` at the relative attack position.","_parentIndex":"Index of the `Claim` to attack in the `claimData` array."}},"createdAt()":{"returns":{"createdAt_":"The timestamp that the DisputeGame contract was created at."}},"defend(uint256,bytes32)":{"params":{"_claim":"The `Claim` at the relative defense position.","_parentIndex":"Index of the claim to defend in the `claimData` array."}},"extraData()":{"details":"`clones-with-immutable-args` argument #2","returns":{"extraData_":"Any extra data supplied to the dispute game contract by the creator."}},"gameData()":{"returns":{"extraData_":"Any extra data supplied to the dispute game contract by the creator.","gameType_":"The type of proof system being used.","rootClaim_":"The root claim of the DisputeGame."}},"gameType()":{"details":"The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.","returns":{"gameType_":"The type of proof system being used."}},"initialize()":{"details":"This function may only be called once."},"resolve()":{"details":"May only be called if the `status` is `IN_PROGRESS`.","returns":{"status_":"The status of the game after resolution."}},"resolveClaim(uint256)":{"details":"This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.","params":{"_claimIndex":"The index of the subgame root claim to resolve."}},"resolvedAt()":{"returns":{"resolvedAt_":"The timestamp that the DisputeGame contract was resolved at."}},"rootClaim()":{"details":"`clones-with-immutable-args` argument #1","returns":{"rootClaim_":"The root claim of the DisputeGame."}},"status()":{"returns":{"status_":"The current status of the game."}},"step(uint256,bool,bytes,bytes)":{"details":"This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.","params":{"_claimIndex":"The index of the challenged claim within `claimData`.","_isAttack":"Whether or not the step is an attack or a defense.","_proof":"Proof to access memory nodes in the VM's merkle state tree.","_stateData":"The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM."}}},"events":{"Move(uint256,bytes32,address)":{"params":{"claim":"The claim being added","claimant":"The address of the claimant","parentIndex":"The index within the `claimData` array of the parent claim"}},"Resolved(uint8)":{"params":{"status":"The status of the game after resolution."}}},"title":"IFaultDisputeGame"},"ast":{"absolutePath":"src/dispute/interfaces/IFaultDisputeGame.sol","id":56033,"exportedSymbols":{"BondAmount":[56920],"Claim":[56916],"ClaimHash":[56918],"Clock":[56928],"Duration":[56924],"GameId":[56926],"GameStatus":[56939],"GameType":[56932],"GameTypes":[56957],"Hash":[56914],"IDisputeGame":[55764],"IFaultDisputeGame":[56032],"LibClaim":[56386],"LibClock":[56373],"LibDuration":[56399],"LibGameId":[56082],"LibGameType":[56451],"LibHash":[56412],"LibHashing":[56104],"LibPosition":[56318],"LibTimestamp":[56425],"LibVMStatus":[56438],"LocalPreimageKey":[57013],"Position":[56930],"Timestamp":[56922],"VMStatus":[56934],"VMStatuses":[56991]},"nodeType":"SourceUnit","src":"32:3760:77","nodes":[{"id":55937,"nodeType":"PragmaDirective","src":"32:24:77","nodes":[],"literals":["solidity","^","0.8",".15"]},{"id":55939,"nodeType":"ImportDirective","src":"58:50:77","nodes":[],"absolutePath":"src/dispute/interfaces/IDisputeGame.sol","file":"./IDisputeGame.sol","nameLocation":"-1:-1:-1","scope":56033,"sourceUnit":55765,"symbolAliases":[{"foreign":{"id":55938,"name":"IDisputeGame","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55764,"src":"67:12:77","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":55940,"nodeType":"ImportDirective","src":"110:40:77","nodes":[],"absolutePath":"src/libraries/DisputeTypes.sol","file":"src/libraries/DisputeTypes.sol","nameLocation":"-1:-1:-1","scope":56033,"sourceUnit":57014,"symbolAliases":[],"unitAlias":""},{"id":56032,"nodeType":"ContractDefinition","src":"246:3545:77","nodes":[{"id":55962,"nodeType":"StructDefinition","src":"380:198:77","nodes":[],"canonicalName":"IFaultDisputeGame.ClaimData","documentation":{"id":55944,"nodeType":"StructuredDocumentation","src":"296:79:77","text":"@notice The `ClaimData` struct represents the data associated with a Claim."},"members":[{"constant":false,"id":55946,"mutability":"mutable","name":"parentIndex","nameLocation":"414:11:77","nodeType":"VariableDeclaration","scope":55962,"src":"407:18:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":55945,"name":"uint32","nodeType":"ElementaryTypeName","src":"407:6:77","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":55948,"mutability":"mutable","name":"counteredBy","nameLocation":"443:11:77","nodeType":"VariableDeclaration","scope":55962,"src":"435:19:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":55947,"name":"address","nodeType":"ElementaryTypeName","src":"435:7:77","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":55950,"mutability":"mutable","name":"claimant","nameLocation":"472:8:77","nodeType":"VariableDeclaration","scope":55962,"src":"464:16:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":55949,"name":"address","nodeType":"ElementaryTypeName","src":"464:7:77","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":55952,"mutability":"mutable","name":"bond","nameLocation":"498:4:77","nodeType":"VariableDeclaration","scope":55962,"src":"490:12:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":55951,"name":"uint128","nodeType":"ElementaryTypeName","src":"490:7:77","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":55955,"mutability":"mutable","name":"claim","nameLocation":"518:5:77","nodeType":"VariableDeclaration","scope":55962,"src":"512:11:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$56916","typeString":"Claim"},"typeName":{"id":55954,"nodeType":"UserDefinedTypeName","pathNode":{"id":55953,"name":"Claim","nameLocations":["512:5:77"],"nodeType":"IdentifierPath","referencedDeclaration":56916,"src":"512:5:77"},"referencedDeclaration":56916,"src":"512:5:77","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$56916","typeString":"Claim"}},"visibility":"internal"},{"constant":false,"id":55958,"mutability":"mutable","name":"position","nameLocation":"542:8:77","nodeType":"VariableDeclaration","scope":55962,"src":"533:17:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Position_$56930","typeString":"Position"},"typeName":{"id":55957,"nodeType":"UserDefinedTypeName","pathNode":{"id":55956,"name":"Position","nameLocations":["533:8:77"],"nodeType":"IdentifierPath","referencedDeclaration":56930,"src":"533:8:77"},"referencedDeclaration":56930,"src":"533:8:77","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Position_$56930","typeString":"Position"}},"visibility":"internal"},{"constant":false,"id":55961,"mutability":"mutable","name":"clock","nameLocation":"566:5:77","nodeType":"VariableDeclaration","scope":55962,"src":"560:11:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Clock_$56928","typeString":"Clock"},"typeName":{"id":55960,"nodeType":"UserDefinedTypeName","pathNode":{"id":55959,"name":"Clock","nameLocations":["560:5:77"],"nodeType":"IdentifierPath","referencedDeclaration":56928,"src":"560:5:77"},"referencedDeclaration":56928,"src":"560:5:77","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Clock_$56928","typeString":"Clock"}},"visibility":"internal"}],"name":"ClaimData","nameLocation":"387:9:77","scope":56032,"visibility":"public"},{"id":55972,"nodeType":"EventDefinition","src":"840:87:77","nodes":[],"anonymous":false,"documentation":{"id":55963,"nodeType":"StructuredDocumentation","src":"584:251:77","text":"@notice Emitted when a new claim is added to the DAG by `claimant`\n @param parentIndex The index within the `claimData` array of the parent claim\n @param claim The claim being added\n @param claimant The address of the claimant"},"eventSelector":"9b3245740ec3b155098a55be84957a4da13eaf7f14a8bc6f53126c0b9350f2be","name":"Move","nameLocation":"846:4:77","parameters":{"id":55971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55965,"indexed":true,"mutability":"mutable","name":"parentIndex","nameLocation":"867:11:77","nodeType":"VariableDeclaration","scope":55972,"src":"851:27:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":55964,"name":"uint256","nodeType":"ElementaryTypeName","src":"851:7:77","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":55968,"indexed":true,"mutability":"mutable","name":"claim","nameLocation":"894:5:77","nodeType":"VariableDeclaration","scope":55972,"src":"880:19:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$56916","typeString":"Claim"},"typeName":{"id":55967,"nodeType":"UserDefinedTypeName","pathNode":{"id":55966,"name":"Claim","nameLocations":["880:5:77"],"nodeType":"IdentifierPath","referencedDeclaration":56916,"src":"880:5:77"},"referencedDeclaration":56916,"src":"880:5:77","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$56916","typeString":"Claim"}},"visibility":"internal"},{"constant":false,"id":55970,"indexed":true,"mutability":"mutable","name":"claimant","nameLocation":"917:8:77","nodeType":"VariableDeclaration","scope":55972,"src":"901:24:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":55969,"name":"address","nodeType":"ElementaryTypeName","src":"901:7:77","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"850:76:77"}},{"id":55981,"nodeType":"FunctionDefinition","src":"1134:69:77","nodes":[],"documentation":{"id":55973,"nodeType":"StructuredDocumentation","src":"933:196:77","text":"@notice Attack a disagreed upon `Claim`.\n @param _parentIndex Index of the `Claim` to attack in the `claimData` array.\n @param _claim The `Claim` at the relative attack position."},"functionSelector":"c55cd0c7","implemented":false,"kind":"function","modifiers":[],"name":"attack","nameLocation":"1143:6:77","parameters":{"id":55979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55975,"mutability":"mutable","name":"_parentIndex","nameLocation":"1158:12:77","nodeType":"VariableDeclaration","scope":55981,"src":"1150:20:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":55974,"name":"uint256","nodeType":"ElementaryTypeName","src":"1150:7:77","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":55978,"mutability":"mutable","name":"_claim","nameLocation":"1178:6:77","nodeType":"VariableDeclaration","scope":55981,"src":"1172:12:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$56916","typeString":"Claim"},"typeName":{"id":55977,"nodeType":"UserDefinedTypeName","pathNode":{"id":55976,"name":"Claim","nameLocations":["1172:5:77"],"nodeType":"IdentifierPath","referencedDeclaration":56916,"src":"1172:5:77"},"referencedDeclaration":56916,"src":"1172:5:77","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$56916","typeString":"Claim"}},"visibility":"internal"}],"src":"1149:36:77"},"returnParameters":{"id":55980,"nodeType":"ParameterList","parameters":[],"src":"1202:0:77"},"scope":56032,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":55990,"nodeType":"FunctionDefinition","src":"1407:69:77","nodes":[],"documentation":{"id":55982,"nodeType":"StructuredDocumentation","src":"1209:193:77","text":"@notice Defend an agreed upon `Claim`.\n @param _parentIndex Index of the claim to defend in the `claimData` array.\n @param _claim The `Claim` at the relative defense position."},"functionSelector":"35fef567","implemented":false,"kind":"function","modifiers":[],"name":"defend","nameLocation":"1416:6:77","parameters":{"id":55988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55984,"mutability":"mutable","name":"_parentIndex","nameLocation":"1431:12:77","nodeType":"VariableDeclaration","scope":55990,"src":"1423:20:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":55983,"name":"uint256","nodeType":"ElementaryTypeName","src":"1423:7:77","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":55987,"mutability":"mutable","name":"_claim","nameLocation":"1451:6:77","nodeType":"VariableDeclaration","scope":55990,"src":"1445:12:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$56916","typeString":"Claim"},"typeName":{"id":55986,"nodeType":"UserDefinedTypeName","pathNode":{"id":55985,"name":"Claim","nameLocations":["1445:5:77"],"nodeType":"IdentifierPath","referencedDeclaration":56916,"src":"1445:5:77"},"referencedDeclaration":56916,"src":"1445:5:77","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$56916","typeString":"Claim"}},"visibility":"internal"}],"src":"1422:36:77"},"returnParameters":{"id":55989,"nodeType":"ParameterList","parameters":[],"src":"1475:0:77"},"scope":56032,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":56002,"nodeType":"FunctionDefinition","src":"2405:110:77","nodes":[],"documentation":{"id":55991,"nodeType":"StructuredDocumentation","src":"1482:918:77","text":"@notice Perform an instruction step via an on-chain fault proof processor.\n @dev This function should point to a fault proof processor in order to execute\n      a step in the fault proof program on-chain. The interface of the fault proof\n      processor contract should adhere to the `IBigStepper` interface.\n @param _claimIndex The index of the challenged claim within `claimData`.\n @param _isAttack Whether or not the step is an attack or a defense.\n @param _stateData The stateData of the step is the preimage of the claim at the given\n        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if\n        the move is a defense. If the step is an attack on the first instruction, it is\n        the absolute prestate of the fault proof VM.\n @param _proof Proof to access memory nodes in the VM's merkle state tree."},"functionSelector":"d8cc1a3c","implemented":false,"kind":"function","modifiers":[],"name":"step","nameLocation":"2414:4:77","parameters":{"id":56000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55993,"mutability":"mutable","name":"_claimIndex","nameLocation":"2427:11:77","nodeType":"VariableDeclaration","scope":56002,"src":"2419:19:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":55992,"name":"uint256","nodeType":"ElementaryTypeName","src":"2419:7:77","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":55995,"mutability":"mutable","name":"_isAttack","nameLocation":"2445:9:77","nodeType":"VariableDeclaration","scope":56002,"src":"2440:14:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":55994,"name":"bool","nodeType":"ElementaryTypeName","src":"2440:4:77","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":55997,"mutability":"mutable","name":"_stateData","nameLocation":"2471:10:77","nodeType":"VariableDeclaration","scope":56002,"src":"2456:25:77","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":55996,"name":"bytes","nodeType":"ElementaryTypeName","src":"2456:5:77","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":55999,"mutability":"mutable","name":"_proof","nameLocation":"2498:6:77","nodeType":"VariableDeclaration","scope":56002,"src":"2483:21:77","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":55998,"name":"bytes","nodeType":"ElementaryTypeName","src":"2483:5:77","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2418:87:77"},"returnParameters":{"id":56001,"nodeType":"ParameterList","parameters":[],"src":"2514:0:77"},"scope":56032,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":56012,"nodeType":"FunctionDefinition","src":"2842:90:77","nodes":[],"documentation":{"id":56003,"nodeType":"StructuredDocumentation","src":"2521:316:77","text":"@notice Posts the requested local data to the VM's `PreimageOralce`.\n @param _ident The local identifier of the data to post.\n @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.\n @param _partOffset The offset of the data to post."},"functionSelector":"f8f43ff6","implemented":false,"kind":"function","modifiers":[],"name":"addLocalData","nameLocation":"2851:12:77","parameters":{"id":56010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56005,"mutability":"mutable","name":"_ident","nameLocation":"2872:6:77","nodeType":"VariableDeclaration","scope":56012,"src":"2864:14:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56004,"name":"uint256","nodeType":"ElementaryTypeName","src":"2864:7:77","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":56007,"mutability":"mutable","name":"_execLeafIdx","nameLocation":"2888:12:77","nodeType":"VariableDeclaration","scope":56012,"src":"2880:20:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56006,"name":"uint256","nodeType":"ElementaryTypeName","src":"2880:7:77","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":56009,"mutability":"mutable","name":"_partOffset","nameLocation":"2910:11:77","nodeType":"VariableDeclaration","scope":56012,"src":"2902:19:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56008,"name":"uint256","nodeType":"ElementaryTypeName","src":"2902:7:77","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2863:59:77"},"returnParameters":{"id":56011,"nodeType":"ParameterList","parameters":[],"src":"2931:0:77"},"scope":56032,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":56018,"nodeType":"FunctionDefinition","src":"3424:60:77","nodes":[],"documentation":{"id":56013,"nodeType":"StructuredDocumentation","src":"2938:481:77","text":"@notice Resolves the subgame rooted at the given claim index.\n @dev This function must be called bottom-up in the DAG\n      A subgame is a tree of claims that has a maximum depth of 1.\n      A subgame root claims is valid if, and only if, all of its child claims are invalid.\n      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.\n @param _claimIndex The index of the subgame root claim to resolve."},"functionSelector":"fdffbb28","implemented":false,"kind":"function","modifiers":[],"name":"resolveClaim","nameLocation":"3433:12:77","parameters":{"id":56016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56015,"mutability":"mutable","name":"_claimIndex","nameLocation":"3454:11:77","nodeType":"VariableDeclaration","scope":56018,"src":"3446:19:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56014,"name":"uint256","nodeType":"ElementaryTypeName","src":"3446:7:77","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3445:21:77"},"returnParameters":{"id":56017,"nodeType":"ParameterList","parameters":[],"src":"3483:0:77"},"scope":56032,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":56025,"nodeType":"FunctionDefinition","src":"3569:55:77","nodes":[],"documentation":{"id":56019,"nodeType":"StructuredDocumentation","src":"3490:74:77","text":"@notice A block hash on the L1 that contains the disputed output root."},"functionSelector":"6361506d","implemented":false,"kind":"function","modifiers":[],"name":"l1Head","nameLocation":"3578:6:77","parameters":{"id":56020,"nodeType":"ParameterList","parameters":[],"src":"3584:2:77"},"returnParameters":{"id":56024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56023,"mutability":"mutable","name":"l1Head_","nameLocation":"3615:7:77","nodeType":"VariableDeclaration","scope":56025,"src":"3610:12:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Hash_$56914","typeString":"Hash"},"typeName":{"id":56022,"nodeType":"UserDefinedTypeName","pathNode":{"id":56021,"name":"Hash","nameLocations":["3610:4:77"],"nodeType":"IdentifierPath","referencedDeclaration":56914,"src":"3610:4:77"},"referencedDeclaration":56914,"src":"3610:4:77","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Hash_$56914","typeString":"Hash"}},"visibility":"internal"}],"src":"3609:14:77"},"scope":56032,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":56031,"nodeType":"FunctionDefinition","src":"3717:72:77","nodes":[],"documentation":{"id":56026,"nodeType":"StructuredDocumentation","src":"3630:82:77","text":"@notice The l2BlockNumber of the disputed output root in the `L2OutputOracle`."},"functionSelector":"8b85902b","implemented":false,"kind":"function","modifiers":[],"name":"l2BlockNumber","nameLocation":"3726:13:77","parameters":{"id":56027,"nodeType":"ParameterList","parameters":[],"src":"3739:2:77"},"returnParameters":{"id":56030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56029,"mutability":"mutable","name":"l2BlockNumber_","nameLocation":"3773:14:77","nodeType":"VariableDeclaration","scope":56031,"src":"3765:22:77","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56028,"name":"uint256","nodeType":"ElementaryTypeName","src":"3765:7:77","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3764:24:77"},"scope":56032,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":55942,"name":"IDisputeGame","nameLocations":["277:12:77"],"nodeType":"IdentifierPath","referencedDeclaration":55764,"src":"277:12:77"},"id":55943,"nodeType":"InheritanceSpecifier","src":"277:12:77"}],"canonicalName":"IFaultDisputeGame","contractDependencies":[],"contractKind":"interface","documentation":{"id":55941,"nodeType":"StructuredDocumentation","src":"152:94:77","text":"@title IFaultDisputeGame\n @notice The interface for a fault proof backed dispute game."},"fullyImplemented":false,"linearizedBaseContracts":[56032,55764,56040],"name":"IFaultDisputeGame","nameLocation":"256:17:77","scope":56033,"usedErrors":[],"usedEvents":[55703,55972]}],"license":"MIT"},"id":77}
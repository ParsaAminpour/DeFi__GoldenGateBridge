{"abi":[],"bytecode":{"object":"0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080f000a","sourceMap":"424:971:59:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:971:59;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080f000a","sourceMap":"424:971:59:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@lib-keccak/=lib/lib-keccak/contracts/lib/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":@solady-test/=lib/lib-keccak/lib/solady/test/\",\":@solady/=lib/lib-keccak/lib/solady/src/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/\",\":lib-keccak/=lib/lib-keccak/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solady/=lib/solady/src/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.15+commit.e14f2714"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@cwia/=lib/clones-with-immutable-args/src/","@lib-keccak/=lib/lib-keccak/contracts/lib/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","@solady-test/=lib/lib-keccak/lib/solady/test/","@solady/=lib/lib-keccak/lib/solady/src/","clones-with-immutable-args/=lib/clones-with-immutable-args/src/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/","lib-keccak/=lib/lib-keccak/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/contracts/","solady/=lib/solady/src/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/Counters.sol":"Counters"},"evmVersion":"london","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/utils/Counters.sol":{"keccak256":"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1","urls":["bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee","dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","title":"Counters"},"ast":{"absolutePath":"lib/openzeppelin-contracts/contracts/utils/Counters.sol","id":51709,"exportedSymbols":{"Counters":[51708]},"nodeType":"SourceUnit","src":"87:1309:59","nodes":[{"id":51636,"nodeType":"PragmaDirective","src":"87:23:59","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":51708,"nodeType":"ContractDefinition","src":"424:971:59","nodes":[{"id":51640,"nodeType":"StructDefinition","src":"447:374:59","nodes":[],"canonicalName":"Counters.Counter","members":[{"constant":false,"id":51639,"mutability":"mutable","name":"_value","nameLocation":"794:6:59","nodeType":"VariableDeclaration","scope":51640,"src":"786:14:59","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51638,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:59","scope":51708,"visibility":"public"},{"id":51652,"nodeType":"FunctionDefinition","src":"827:112:59","nodes":[],"body":{"id":51651,"nodeType":"Block","src":"901:38:59","nodes":[],"statements":[{"expression":{"expression":{"id":51648,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51643,"src":"918:7:59","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":51649,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":51639,"src":"918:14:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":51647,"id":51650,"nodeType":"Return","src":"911:21:59"}]},"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:59","parameters":{"id":51644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51643,"mutability":"mutable","name":"counter","nameLocation":"860:7:59","nodeType":"VariableDeclaration","scope":51652,"src":"844:23:59","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":51642,"nodeType":"UserDefinedTypeName","pathNode":{"id":51641,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":51640,"src":"844:7:59"},"referencedDeclaration":51640,"src":"844:7:59","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:59"},"returnParameters":{"id":51647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51646,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51652,"src":"892:7:59","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51645,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:59"},"scope":51708,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":51666,"nodeType":"FunctionDefinition","src":"945:123:59","nodes":[],"body":{"id":51665,"nodeType":"Block","src":"998:70:59","nodes":[],"statements":[{"id":51664,"nodeType":"UncheckedBlock","src":"1008:54:59","statements":[{"expression":{"id":51662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":51658,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51655,"src":"1032:7:59","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":51660,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":51639,"src":"1032:14:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":51661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:59","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":51663,"nodeType":"ExpressionStatement","src":"1032:19:59"}]}]},"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:59","parameters":{"id":51656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51655,"mutability":"mutable","name":"counter","nameLocation":"980:7:59","nodeType":"VariableDeclaration","scope":51666,"src":"964:23:59","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":51654,"nodeType":"UserDefinedTypeName","pathNode":{"id":51653,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":51640,"src":"964:7:59"},"referencedDeclaration":51640,"src":"964:7:59","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:59"},"returnParameters":{"id":51657,"nodeType":"ParameterList","parameters":[],"src":"998:0:59"},"scope":51708,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":51694,"nodeType":"FunctionDefinition","src":"1074:229:59","nodes":[],"body":{"id":51693,"nodeType":"Block","src":"1127:176:59","nodes":[],"statements":[{"assignments":[51673],"declarations":[{"constant":false,"id":51673,"mutability":"mutable","name":"value","nameLocation":"1145:5:59","nodeType":"VariableDeclaration","scope":51693,"src":"1137:13:59","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51672,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":51676,"initialValue":{"expression":{"id":51674,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51669,"src":"1153:7:59","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":51675,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":51639,"src":"1153:14:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:59"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":51680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":51678,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51673,"src":"1185:5:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":51679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:59","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:59","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":51681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:59","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":51677,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:59","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1177:49:59","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":51683,"nodeType":"ExpressionStatement","src":"1177:49:59"},{"id":51692,"nodeType":"UncheckedBlock","src":"1236:61:59","statements":[{"expression":{"id":51690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":51684,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51669,"src":"1260:7:59","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":51686,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":51639,"src":"1260:14:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":51689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":51687,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51673,"src":"1277:5:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":51688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:59","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":51691,"nodeType":"ExpressionStatement","src":"1260:26:59"}]}]},"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:59","parameters":{"id":51670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51669,"mutability":"mutable","name":"counter","nameLocation":"1109:7:59","nodeType":"VariableDeclaration","scope":51694,"src":"1093:23:59","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":51668,"nodeType":"UserDefinedTypeName","pathNode":{"id":51667,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":51640,"src":"1093:7:59"},"referencedDeclaration":51640,"src":"1093:7:59","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:59"},"returnParameters":{"id":51671,"nodeType":"ParameterList","parameters":[],"src":"1127:0:59"},"scope":51708,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":51707,"nodeType":"FunctionDefinition","src":"1309:84:59","nodes":[],"body":{"id":51706,"nodeType":"Block","src":"1358:35:59","nodes":[],"statements":[{"expression":{"id":51704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":51700,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51697,"src":"1368:7:59","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":51702,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":51639,"src":"1368:14:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":51703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:59","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":51705,"nodeType":"ExpressionStatement","src":"1368:18:59"}]},"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:59","parameters":{"id":51698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51697,"mutability":"mutable","name":"counter","nameLocation":"1340:7:59","nodeType":"VariableDeclaration","scope":51707,"src":"1324:23:59","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":51696,"nodeType":"UserDefinedTypeName","pathNode":{"id":51695,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":51640,"src":"1324:7:59"},"referencedDeclaration":51640,"src":"1324:7:59","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$51640_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:59"},"returnParameters":{"id":51699,"nodeType":"ParameterList","parameters":[],"src":"1358:0:59"},"scope":51708,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":51637,"nodeType":"StructuredDocumentation","src":"112:311:59","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"linearizedBaseContracts":[51708],"name":"Counters","nameLocation":"432:8:59","scope":51709,"usedErrors":[]}],"license":"MIT"},"id":59}